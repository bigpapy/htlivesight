htlivesight.Events={};htlivesight.Events = function() {};htlivesightEvent.type = function(id, imageSrc, imageSrcOld, text, mysound, opsound, frsound, opfrsound, otsound, color) {    this.id = id; //    this.imageSrc = imageSrc;//    this.imageSrcOld = imageSrcOld;    this.text = text; // text for slider    this.mysound = mysound; // mysound for slider (my team)    this.opsound = opsound; // opsound for slider (opponent my team)    this.frsound = frsound; // frsound for slider (friend team)    this.opfrsound = opfrsound; // frsound for slider (opponent friend team)    this.otsound = otsound; // frsound for slider (other team)    this.color = color;};htlivesightEvent.special = function(txt, img) {    this.txt = txt;    this.imgSrc = img;};function htlivesightEvent (i, m, sp, st, op, k, t) {    var zeroLead = function(key) {	var zeros = ["000", "00", "0", ""];	var id = key.split("_")[0];	return zeros[id.length]+id;    };    var keyId = zeroLead(k);    this.index = i;    this.minute = m;    this.subjectPlayerId = sp;    this.subjectTeamId = st;    this.objectPlayerId = op;    this.key = {	    txt: k,	    ABC: keyId,	    A: keyId[0],	    B: keyId[1],	    C: keyId[2],	    AB: keyId[0]+keyId[1],	    BC: keyId[1]+keyId[2]    };    this.match = null,    this.text = t;    this.type = htlivesight.Events.type.NONE;    this.special = null;};htlivesightEvent.prototype.isInfo = function() {    return (	    this.type == htlivesight.Events.type.INFO|| 	    (this.minute == 0 && !htlivesight.prefs.personalization.weather &&		    (this.type == htlivesight.Events.type.SUN || 			    this.type == htlivesight.Events.type.FEW_CLOUDS	||			    this.type == htlivesight.Events.type.OVERCAST ||			    this.type == htlivesight.Events.type.RAIN 		    ) 	    )|| ((this.type == htlivesight.Events.type.END_HALF || this.type == htlivesight.Events.type.END_MATCH ) &&		    !htlivesight.prefs.personalization.whistleTime)	||		    ((this.type == htlivesight.Events.type.SUN || this.type == htlivesight.Events.type.RAIN) && 			    !htlivesight.prefs.personalization.weatherSE)    );};htlivesight.Events.type = {	GOAL: new htlivesightEvent.type(10, htlivesight.Image.event.goal, null, "EventGoal", htlivesight.Sound.sample.mygoal, htlivesight.Sound.sample.opgoal, htlivesight.Sound.sample.frgoal, htlivesight.Sound.sample.opfrgoal, htlivesight.Sound.sample.otgoal, htlivesight.Notify.color.green),	PENALTY_GOAL: new htlivesightEvent.type(15, htlivesight.Image.event.penalty_goal, null, "EventPenaltyGoal", htlivesight.Sound.sample.mygoal, htlivesight.Sound.sample.opgoal, htlivesight.Sound.sample.frgoal, htlivesight.Sound.sample.opfrgoal, htlivesight.Sound.sample.otgoal, htlivesight.Notify.color.green),	PENALTY_MISS: new htlivesightEvent.type(16, htlivesight.Image.event.penalty_miss, null, "EventPenaltyMiss", htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Notify.color.red),	INJURY: new htlivesightEvent.type(20, htlivesight.Image.event.injury, null, "EventInjury", htlivesight.Sound.sample.myboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Notify.color.red),	RED: new htlivesightEvent.type(30, htlivesight.Image.event.red, null, "EventRed", htlivesight.Sound.sample.mysentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Notify.color.red),	YELLOW2: new htlivesightEvent.type(40, htlivesight.Image.event.yellow2, null, "EventYellow2", htlivesight.Sound.sample.mysentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Notify.color.red),	BRUISED: new htlivesightEvent.type(50, htlivesight.Image.event.bruised, null, null, htlivesight.Sound.sample.mybruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Notify.color.orange),	YELLOW: new htlivesightEvent.type(60, htlivesight.Image.event.yellow, null, null, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Notify.color.yellow),	MISS: new htlivesightEvent.type(70, htlivesight.Image.event.miss, null, null, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.missOther, htlivesight.Sound.sample.missFriend, htlivesight.Sound.sample.missOther, htlivesight.Sound.sample.missOther, htlivesight.Notify.color.grey),	SUN: new htlivesightEvent.type(80, htlivesight.Image.event.sun, htlivesight.ImageOld.event.sun, null, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun),	FEW_CLOUDS: new htlivesightEvent.type(90,htlivesight.Image.event.few_clouds, htlivesight.ImageOld.event.few_clouds, null, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds),	OVERCAST: new htlivesightEvent.type(100, htlivesight.Image.event.overcast, htlivesight.ImageOld.event.overcast, null, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast),	RAIN: new htlivesightEvent.type(110, htlivesight.Image.event.rain, htlivesight.ImageOld.event.rain, null, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain),	HATTRICK: new htlivesightEvent.type(120, htlivesight.Image.event.hattrick, htlivesight.ImageOld.event.hattrick, null, htlivesight.Sound.sample.tarzan, null, htlivesight.Sound.sample.tarzan, null, htlivesight.Sound.sample.tarzan),	PRESSING: new htlivesightEvent.type(130, htlivesight.Image.event.pressing,null, null,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing),	SUB: new htlivesightEvent.type(140, htlivesight.Image.event.substitute, htlivesight.ImageOld.event.substitute),	SWAP: new htlivesightEvent.type(150, htlivesight.Image.event.swap, htlivesight.ImageOld.event.swap),	END_MATCH: new htlivesightEvent.type(160, htlivesight.Image.event.info, htlivesight.ImageOld.event.info, null, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end),	END_HALF: new htlivesightEvent.type(170, htlivesight.Image.event.info, htlivesight.ImageOld.event.info, null, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half),	BEGINNING: new htlivesightEvent.type(180, htlivesight.Image.transparent, null, null, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning),	INFO: new htlivesightEvent.type(200, htlivesight.Image.event.info, htlivesight.ImageOld.event.info),	NONE: new htlivesightEvent.type(1000, htlivesight.Image.transparent)};/* ---------------------------------------------------------------- * commun Parse functions * ---------------------------------------------------------------- */htlivesight.Events.ParseList = function(xml,minutes) {    var event, index;    var events = new Object();    var eventNode;    try {	var first=Number.MAX_VALUE, last=0;	var eventsNode = xml.getElementsByTagName("Event");	if(htlivesight.prefs.other.reLiveByEvent && htlivesight.prefs.other.reLive){	    var maxEvent=minutes;	    var jumpevent=0;	    try{		var indexStart=xml.getElementsByTagName("Event")[0].attributes.getNamedItem("Index").value;		for(var j=0;j<= Math.min((maxEvent+jumpevent-indexStart), eventsNode.length-1)/*eventsNode.length*/ ;j++){		    eventNode = eventsNode[j];		    index=xml.getElementsByTagName("Event")[j].attributes.getNamedItem("Index").value;		    event = htlivesight.Events.ParseEvent(eventNode,index);		    minutes=event.minute;		    if ((j+1)<eventsNode.length){			eventNode = eventsNode[j+1];			var indexNext=xml.getElementsByTagName("Event")[j+1].attributes.getNamedItem("Index").value;			var nextEvent = htlivesight.Events.ParseEvent(eventNode,indexNext);			htlivesight.Time.reLiveMinute=0;			//var endEventList=false;			if (event.minute==nextEvent.minute) {			    jumpevent++;			}		    }else{			htlivesight.Time.reLiveMinute=Number.MAX_VALUE;		    };		    first = Math.min(first, event.index);		    last = Math.max(last, event.index);		    events["_" + event.index] = event;		};	    }catch(e){/*alert("error relive by event "+ e);*/}	}else for(var j=0, len=eventsNode.length;j< len ;j++){	    eventNode = eventsNode[j];	    index=xml.getElementsByTagName("Event")[j].attributes.getNamedItem("Index").value;	    event = htlivesight.Events.ParseEvent(eventNode,index);	    if ((htlivesight.prefs.other.reLive) && (event.minute > minutes)){	    }else{		first = Math.min(first, event.index);		last = Math.max(last, event.index);		events["_" + event.index] = event;	    }	}	events.first = first;	events.last = last;    } catch(e) {alert("Events.ParseList() : " + e);}    return events;};htlivesight.Events.ParseEvent = function(xml,index) {    try {	return new htlivesightEvent(		index,		htlivesight.Events.ParseMinute(xml),		htlivesight.Events.ParseSubjectPlayerId(xml),		htlivesight.Events.ParseSubjectTeamId(xml),		htlivesight.Events.ParseObjectPlayerId(xml),		htlivesight.Events.ParseKey(xml),		htlivesight.Events.ParseText(xml)	);    } catch(e) {alert("Event.ParseEvent : " + e);}    return null;};htlivesight.Events.ParseIndex = function (xml) {    var indexStr = htlivesight.Util.Parse("Event", xml);    return parseInt(indexStr, 10);};htlivesight.Events.ParseMinute = function (xml) {    return htlivesight.Util.Parse("Minute", xml);};htlivesight.Events.ParseSubjectPlayerId = function (xml) {    return htlivesight.Util.Parse("SubjectPlayerID", xml);};htlivesight.Events.ParseObjectPlayerId = function (xml) {    return htlivesight.Util.Parse("ObjectPlayerID", xml);};htlivesight.Events.ParseSubjectTeamId = function (xml) {    return htlivesight.Util.Parse("SubjectTeamID", xml);};htlivesight.Events.ParseKey = function (xml) {    return htlivesight.Util.Parse("EventKey", xml);};/**************************************************************** * This function extract event text from xml file. There are some * event which has a "" content (from 550_0 to 550_9) so return * function will give back "" ****************************************************************/htlivesight.Events.ParseText = function (xml) {    if (htlivesight.Util.Parse("EventText", xml) == null) return "";    return htlivesight.Util.Parse("EventText", xml);};/** -------------------------------------------- * - translates the type of event. * -------------------------------------------- * - if it is an information event, adds that information to the match * - (weather, team formation, etc) * -  * - otherwise, sets actionEvent flag to true;  * -------------------------------------------- */htlivesight.Events.translate = function (match, event) {    var team;    event.match = match;    if (htlivesight.prefs.other.printEventKey && event.text!="")     {	event.text= "(" + event.key.A + event.key.BC + ") " + event.text;    };    switch (event.key.A) {    case "0": //match information/statistics	switch (event.key.BC) {	case "11": // formation // no more present in Match event types official list	    event.type=htlivesight.Events.type.BEGINNING;	    break;		case "19": // Players enter the field		event.type=htlivesight.Events.type.INFO;		//event.title = "Players enter the field";		//event.special = new htlivesightEvent.special("Players enter the field");//translate!			    break;	case "20": // Tactical disposition	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Tactical disposition");//translate!	    //match.getSideById(event.subjectTeamId).formation = htlivesight.Events.translate.parseFormation(event.text);	    break;	case "21": // Player names in lineup	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Player names in lineup");//translate!	    team = match.getTeamById(event.subjectTeamId);	    var stringLineUp= htlivesight.LineUp.LineUpEvent(event, match);	    var side;	    if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup		side="home";	    else		side="away";	    event.lineupElement = htlivesight.DOM.createLineupElement(side+"_team_formation_"+match.id+"_"+match.sourceSystem+"_table", htlivesight.Events.translate.parseLineup(htlivesight.Util.CleanText(stringLineUp)),event);	    match.getSideById(event.subjectTeamId).formation = htlivesight.LineUp.FormationFromLineUp(match.getSideById(event.subjectTeamId).lineUp);	    $( "#"+side+"_team_formation_" + match.id + "_" + match.sourceSystem+"_table").tabs();	    $( "#"+side+"_team_formation_" + match.id + "_" + match.sourceSystem).effect("pulsate","swing", 40);	    break;	case "22": // Players from neighborhood used	    event.type = htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Players from neighborhood used");//translate!		team = match.getTeamById(event.subjectTeamId);	    break;	    	case "23": // Same formation both teams	    event.type = htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Same formation both teams");//translate!	    break;	    	case "24": // Team formations (different)	    event.type = htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Team formations (different)");//translate!	    break;	case "25": // Regional derby	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Regional derby");//translate!	    break;	case "26": // Neutral ground	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Neutral ground");//translate!	    break;	case "27": // Away is actually home	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Away is actually home");//translate!	    break;	case "30": // Spectators/venue - rain	    event.type=htlivesight.Events.type.RAIN;	    //event.special = new htlivesightEvent.special("Spectators/venue - rain");//translate!	    match.weather.image = htlivesight.Image.weather.rain;	    match.arena.attendance = event.objectPlayerId;	    match.arena.name = htlivesight.Events.translate.addArena(event.text); //bigpapy	    break;	case "31": // Spectators/venue - cloudy	    event.type=htlivesight.Events.type.OVERCAST;	    //event.special = new htlivesightEvent.special("Spectators/venue - cloudy");//translate!	    match.weather.image = htlivesight.Image.weather.overcast;	    match.arena.attendance  = event.objectPlayerId;	    match.arena.name = htlivesight.Events.translate.addArena(event.text); //bigpapy	    break;	case "32": // Spectators/venue - fair weather	    event.type=htlivesight.Events.type.FEW_CLOUDS;	    //event.special = new htlivesightEvent.special("Spectators/venue - fair weather");//translate!	    match.weather.image = htlivesight.Image.weather.few_clouds;	    match.arena.attendance  = event.objectPlayerId;	    match.arena.name = htlivesight.Events.translate.addArena(event.text); // bigpapy	    break;	case "33": // Spectators/venue - sunny	    event.type=htlivesight.Events.type.SUN;	    //event.special = new htlivesightEvent.special("Spectators/venue - sunny");//translate!	    match.weather.image = htlivesight.Image.weather.sun;	    match.arena.attendance  = event.objectPlayerId;	    match.arena.name = htlivesight.Events.translate.addArena(event.text);//bigpapy	    break;	case "40": // Dominated	    // subjectTeamId: team id;  objectPlayerId: rate	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Dominated");//translate!	    var rate= parseInt(event.objectPlayerId);	    if(event.minute == 45){		match.home.possession_1=100-rate;		match.away.possession_1=100-rate;		match.getSideById(event.subjectTeamId).possession_1 =rate;	    }else if (event.minute == 90){		match.home.possession_2=100-rate;		match.away.possession_2=100-rate;		match.getSideById(event.subjectTeamId).possession_2 =rate;	    }	    break;	case "41": // Best player	    // subjectPlayerId: player id; subjectTeamId: team id 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Best player");//translate!	    break;	case "42": // worst player	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Worst player");//translate!	    break;	case "45": // Half time results	    event.type=htlivesight.Events.type.END_HALF;	    //event.special = new htlivesightEvent.special("Half time results");//translate!	    break;	case "46": // Hat-trick comment	    event.type=htlivesight.Events.type.HATTRICK;	    //event.special = new htlivesightEvent.special("Hat-trick comment");//translate!	    break;	case "47": // No team dominated	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("No team dominated");//translate!	    if (event.minute == 45){		match.home.possession_1 =50;		match.away.possession_1 =50;	    }else if (event.minute == 90){		match.home.possession_2 =50;		match.away.possession_2 =50;	    }	    break;	case "55": // Penalty contest: Goal by Technical (no nerves)		event.type=htlivesight.Events.type.PENALTY_GOAL;		//event.special = new htlivesightEvent.special("Penalty contest: Goal by Technical (no nerves)");//translate!	case "56": // Penalty contest: Goal, no nerves	    event.type=htlivesight.Events.type.PENALTY_GOAL;	    //event.special = new htlivesightEvent.special("Penalty contest: Goal, no nerves");//translate!	    htlivesight.Events.translate.addScorers(event, match);	    break;	case "57": // Penalty contest: Goal in spite of nerves	    event.type=htlivesight.Events.type.PENALTY_GOAL;	    //event.special = new htlivesightEvent.special("Penalty contest: Goal in spite of nerves");//translate!	    htlivesight.Events.translate.addScorers(event, match);	    break;	case "58": // Penalty contest: No goal because of nerves	    event.type=htlivesight.Events.type.PENALTY_MISS;	    //event.special = new htlivesightEvent.special("Penalty contest: No goal because of nerves");//translate!	    break;	case "59": // Penalty contest: No goal in spite of no nerves	    event.type=htlivesight.Events.type.PENALTY_MISS;	    //event.special = new htlivesightEvent.special("Penalty contest: No goal because of nerves");//translate!	    break;	case "60": // Underestimation	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Underestimation",htlivesight.data[0]));	    break;	case "61": // Organization breaks	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("OrganizationBreaks",htlivesight.data[0]));	    break;	case "62": // Withdraw	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Pullback",htlivesight.data[0]));	    break;	case "63": // Remove underestimation at pause	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationRemove",htlivesight.data[0]));	    break;	case "64": // Reorganize	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Reorganize",htlivesight.data[0]));	    break;	case "65": // Nerves in important thrilling game	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("NervesImportantThrillingGame",htlivesight.data[0]));	    break;	case "66": // Remove underestimation at pause (goaldiff = 0)	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationReduceDouble",htlivesight.data[0]));	    break;	case "67": // Remove underestimation at pause (goaldiff = 1)	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationReduceOnce",htlivesight.data[0]));	    break;	case "68": // Successful pressing	    event.type=htlivesight.Events.type.PRESSING;	   // event.special = new htlivesightEvent.special("Successful pressing");//translate!	    break;	case "69": // Remove underestimation	    event.type=htlivesight.Events.type.INFO;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationRemove",htlivesight.data[0]));	    break;	case "70": // Extension	    //event.type=htlivesight.Events.type.INFO;	    event.type=htlivesight.Events.type.END_HALF;	    //event.special = new htlivesightEvent.special("Extension");//translate!	    break;	case "71": // Penalty contest (after extension)	    //event.type=htlivesight.Events.type.INFO;	    event.type=htlivesight.Events.type.END_HALF;	    //event.special = new htlivesightEvent.special("Penalty contest (after extension)");//translate!	    break;	case "72": // Extension decided 	    // subjectTeamId: wining team id	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Extension decided");//translate!	    break;	case "73": // After 22 penalties tossing coin! 	    // subjectTeamId: wining team id	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("After 22 penalties tossing coin!");//translate!	    break;	    	case "75": // Added time 	    event.type=htlivesight.Events.type.INFO;	   // event.special = new htlivesightEvent.special("Added time");//translate!	    break;	    	case "76": // No added time 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("No added time");//translate!	    break;	case "80": // New captain 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("New captain");//translate!//	    htlivesight.LineUp.newCaptainEvent(event, match);	    break;	    	case "81": // new set pieces taker 	    event.type = htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("New set pieces taker");//translate!//	    htlivesight.LineUp.newCaptainEvent(event, match);	    break;	case "90": // Injured but keeps playing	    event.type=htlivesight.Events.type.BRUISED;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Bruised",htlivesight.data[0]));	    break;	case "91": // Moderately injured, leaves field 	    event.type=htlivesight.Events.type.INJURY;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("ModeratelyInjuried",htlivesight.data[0])+" (+1/+3)");	    htlivesight.Events.translate.addInjured(event, match);	    htlivesight.LineUp.InjuryWithReplaceEvent(event, match); 	    match.getSideById(event.subjectTeamId).injured +=1;	    break;	case "92": // Badly injured, leaves field 	    event.type=htlivesight.Events.type.INJURY;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("BadlyInjuried",htlivesight.data[0])+ "(+3/+4)");	    htlivesight.Events.translate.addInjured(event, match);	    htlivesight.LineUp.InjuryWithReplaceEvent(event, match);	    match.getSideById(event.subjectTeamId).injured +=1;	    break;	case "93": // Injured and no replacement existed	    event.type=htlivesight.Events.type.INJURY;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0]));	    htlivesight.Events.translate.addInjured(event, match);	    htlivesight.LineUp.SentOffEvent(event, match);	    match.getSideById(event.subjectTeamId).injured +=1;	    break;	case "94": // Injured after foul but continues.	    event.type=htlivesight.Events.type.BRUISED;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Bruised",htlivesight.data[0])+" ("+htlivesight.Util.Parse("ByFoul",htlivesight.data[0])+")");	    break;	case "95": // 	 Injured after foul and exits	    event.type=htlivesight.Events.type.INJURY;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0])+" ("+htlivesight.Util.Parse("ByFoul",htlivesight.data[0])+")");	    //event.special =  new htlivesightEvent.special("Injured after foul");	    htlivesight.Events.translate.addInjured(event, match);	    htlivesight.LineUp.InjuryWithReplaceEvent(event, match);	    match.getSideById(event.subjectTeamId).injured +=1;	    break;	case "96": // 	 Injured after foul and no replacement existed	    event.type=htlivesight.Events.type.INJURY;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0])+" ("+htlivesight.Util.Parse("ByFoul",htlivesight.data[0])+")");	    //event.special =  new htlivesightEvent.special("Injured after foul");	    htlivesight.Events.translate.addInjured(event, match);	    htlivesight.LineUp.SentOffEvent(event, match);	    match.getSideById(event.subjectTeamId).injured +=1;	    break;	case "97": // Keeper injured, field player has to take his place	    event.type=htlivesight.Events.type.INFO;	    htlivesight.LineUp.MissingKeeperEvent(event, match);	    break;	default:	    break;	}	break;    case "1": // goal    case "2": // missed goal	if (event.key.A == 1) {	    event.type=htlivesight.Events.type.GOAL;	    htlivesight.Events.translate.addScorers(event, match);	} else {	    event.type=htlivesight.Events.type.MISS;	}	switch (event.key.BC) {		case "05": // Unpredictable (create pass, other player finishes)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableLongPass",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "06": // Unpredictable (intercept pass, finishes himself)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableScoresOnHisOwn",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "07": // Long Shot (scores)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLongShot",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    match.getSideById(event.subjectTeamId).long_shot +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).long_shot_goal +=1;	    break;	case "08": // Unpredictable (get the ball from opponent, finishes himself)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableSpecialAction",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "09": // Unpredictable (give the ball to opponent, opponent finishes)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableMistake",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	    	case "15": // Quick Attacker (scores himself)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickScoresAfterRush",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "16": // (passes to other attacker, other attacker finishes)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickAssist",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "17": // Low Stamina (give the ball to opponent, opponent finishes)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLowStamina",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "18": // Corner (scores)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialCornerKick",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "19": // Corner+Header (scores)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialCornerKick",htlivesight.data[0]));	    event.special.txt = event.special.txt + ", " + htlivesight.Util.Parse("EventSpecialHead",htlivesight.data[0]);	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "25": // Unpredictable, own goal conclusion 	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableOwnGoal",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "35": // Experienced forward (finishes himself)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("ExperiencedForward",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "36": // Inexperienced defender (opponent occasion)	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLowExperience",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "37": // SE: Winger to Head spec	    if (event.key.A == 1) event.special = new htlivesightEvent.special(htlivesight.Util.Parse("WingerHead",htlivesight.data[0]));	    else event.special =new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialWinger",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "38": // SE: Winger to anyone Scores	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialWinger",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "39": // SE: Technical goes around head player	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialTechnical",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	case "85": // Indirect Free Kick	case "86":	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialIndirect",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).free_kick +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).free_kick_goal +=1;	    break;	case "87": // long shots	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("LongShot",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.long_shots")*/ htlivesight.Util.Parse("TacticLongShots",htlivesight.data[0]);	    match.getSideById(event.subjectTeamId).occasion +=1;	    match.getSideById(event.subjectTeamId).long_shot +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).long_shot_goal +=1;	    break;	case "88":	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLongShotDefended",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).occasion +=1;	    match.getSideById(event.subjectTeamId).long_shot +=1;	    break;	case "89":	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickVsQuick",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).special_event +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;	    break;	}	/*switch (event.key.B) {				case "0": // away leads, home redude				case "1": // away leads, home evens				case "2": // draw, home leads				case "3": // home leads, home increase				case "4": // counter-attack				case "5": // home leads, away redude				case "6": // home leads, away evens				case "7": // draw, away leads				case "8": // away leads, away increase					break;			}*/	switch (event.key.C) {	case "0" : // Free Kick	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideFreeKick",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).free_kick +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).free_kick_goal +=1;	    break;					case "1" : // Center	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideCenter",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).center +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).center_goal+=1;	    break;					case "2" : // Left	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideLeft",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).left +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).left_goal+=1;	    break;					case "3" : // Right	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideRight",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).right +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).right_goal +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    break;					case "4" : // Penalty	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSidePenalty",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).penalty +=1;	    match.getSideById(event.subjectTeamId).occasion +=1;	    if(event.key.A == 1)match.getSideById(event.subjectTeamId).penalty_goal +=1;	    break;	}	if (event.key.B == "4" || event.key.BC == "86") { // Counter-Attack	    event.special.txt = (htlivesight.Util.Parse("EventSpecialCounterAttack",htlivesight.data[0]) +		    ", " + event.special.txt);	}	break;    case "3": // special tactics	switch (event.key.BC) {	case "01": // Rain & technical - performance down	    event.type=htlivesight.Events.type.RAIN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialTechnicalRain",htlivesight.data[0]));	    break;	case "02": // Rain & powerful - performance up	    event.type=htlivesight.Events.type.RAIN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialPowerfulRain",htlivesight.data[0]));	    break;	case "03": // Sun & technical - performance up	    event.type=htlivesight.Events.type.SUN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialTechnicalSun",htlivesight.data[0]));	    break;	case "04": // Sun & powerful - performance down	    event.type=htlivesight.Events.type.SUN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialPowerfulSun",htlivesight.data[0]));	    break;	    	case "05": // Rain & quick - performance down	    event.type=htlivesight.Events.type.RAIN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialQuickRain",htlivesight.data[0]));	    break; 	case "06": // Sun & quick - performance down	    event.type=htlivesight.Events.type.SUN;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialQuickSun",htlivesight.data[0]));	    break;      	case "31": // pressing	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticPressing",htlivesight.data[0]);	    break;	case "32": // counter-attack	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticCA",htlivesight.data[0]);	    break;	case "33": // attack in the middle	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]);	    break;	case "34": // attack on wings	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]);	    break;	case "35": // play creatively	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.play_creative")*/htlivesight.Util.Parse("TacticPlayCreative",htlivesight.data[0]);	    break;	case "36": // long shots	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.long_shots")*/htlivesight.Util.Parse("TacticLongShots",htlivesight.data[0]);	    break;	case "43": // attack in the middle	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.aim")*/htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]);	    event.special =  new htlivesightEvent.special(/*strings.getString("tactic.aim")*/htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]));	    break;	case "44": // attack on wings //add by bigpapy	    event.type=htlivesight.Events.type.INFO;	    match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.aow")*/htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]);	    event.special =  new htlivesightEvent.special(/*strings.getString("tactic.aow")*/htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]));	    break;	case "50": // Player substitution: team is behind	    event.type=htlivesight.Events.type.SUB;	    try{		htlivesight.LineUp.SubstitutionEvent(event, match);	    }catch(e){alert("event substitution. Error="+e);} 	    break;	case "51": // Player substitution: team is ahead	    event.type=htlivesight.Events.type.SUB;	    try{		htlivesight.LineUp.SubstitutionEvent(event, match);	    }catch(e){alert("event substitution. Error="+e);} 	    break;	case "52": // Player substitution: minute	    event.type=htlivesight.Events.type.SUB;	    try{		htlivesight.LineUp.SubstitutionEvent(event, match);	    }catch(e){alert("event substitution. Error="+e);} 	    break;	case "60": // Change of tactic: team is behind	    event.type=htlivesight.Events.type.INFO;	    try{		htlivesight.LineUp.IndividualOrderEvent(event, match);	    }catch(e){alert("event tactic change. Error="+e);} 	    break;	case "61": // Change of tactic: team is ahead	    event.type=htlivesight.Events.type.INFO;	    try{		htlivesight.LineUp.IndividualOrderEvent(event, match);	    }catch(e){alert("event tactic change. Error="+e);} 	    break;	case "62": // Change of tactic: minute	    event.type=htlivesight.Events.type.INFO;	    try{		htlivesight.LineUp.IndividualOrderEvent(event, match);	    }catch(e){alert("event tactic change. Error="+e);} 	    break;	case "70": // Player position swap: team is behind	    event.type=htlivesight.Events.type.SWAP;	    try{		htlivesight.LineUp.SwapEvent(event, match);	    }catch(e){alert("event swap position. Error="+e);} 	    break;	case "71": // Player position swap: team is ahead	    event.type=htlivesight.Events.type.SWAP;	    try{		htlivesight.LineUp.SwapEvent(event, match);	    }catch(e){alert("event swap position. Error="+e);} 	    break;	case "72": // Player position swap: minute	    event.type=htlivesight.Events.type.SWAP;	    try{		htlivesight.LineUp.SwapEvent(event, match);	    }catch(e){alert("event swap position. Error="+e);} 	    break;	default:	    break;	};	break;    case "4": // nothing        	switch (event.key.BC) {    	    	case "50": // Player got third yellow card misses next match    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player got third yellow card misses next match");//translate!    	    break;    	        	case "51": // With this standing team x will relegate to cup y    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("With this standing team x will relegate to cup y");//translate!    	    break;    	    	case "52": // Player current team matches 100s anniversary    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player current team matches 100s anniversary");//translate!    	    break;    	        	case "53": // Player possibly the last game in this team    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player possibly the last game in this team");//translate!    	    break;    	        	case "54": // Player possibly the last game in this team    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Doctor report of injury length");//translate!    	    break;        	        	case "55": // New star player of the team    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("New star player of the team");//translate!    	    break;    	        	case "56": // Player career goals multiple of 50    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player career goals multiple of 50");//translate!    	    break;    	        	case "57": // Player league goals this season    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player league goals this season");//translate!    	    break;    	        	case "58": // Player cup goals this season    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Player cup goals this season");//translate!    	    break;    	        	case "59": // Bench player warming up    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Bench player warming up");//translate!    	    break;    	        	case "60": // Fans shocked by losing    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Fans shocked by losing");//translate!    	    break;    	        	case "61": // Fans upset by losing    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Fans upset by losing");//translate!    	    break;    	    	case "62": // Fans surprised by winning    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Fans surprised by winning");//translate!    	    break;    	        	case "63": // Fans excited by winning    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Fans excited by winning");//translate!    	    break;    	        	case "64": // Exact number of spectators    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Exact number of spectators");//translate!    	    break;        	        	case "65": // Team should win match to secure winning the league    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Team should win match to secure winning the league");//translate!    	    break;    	        	case "66": // Team should win match to have chance of winning league    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Team should win match to have chance of winning league");//translate!    	    break;    	        	case "67": // The winner of this match (if there is one) can have a chance of winning the league    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("The winner of this match (if there is one) can have a chance of winning the league");//translate!    	    break;    	        	case "68": // Team should win match to make sure they don't demote    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Team should win match to make sure they don't demote");//translate!    	    break;    	        	case "69": // Team should win match to have a chance of not demoting    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("Team should win match to have a chance of not demoting");//translate!    	    break;    	        	case "70": // The loser of this match will demote    	    event.type = htlivesight.Events.type.INFO;    	    //event.special = new htlivesightEvent.special("The loser of this match will demote");//translate!    	    break;    	    }		break;    case "5": // cards & match over	switch (event.key.BC) {	case "00": // Both teams walkover	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Both teams walkover");//translate!	    break;	case "01": // Home team walkover	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Home team walkover");//translate!	    break;	case "02": // Away team walkover	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Away team walkover");//translate!	    break;	case "03": // Both teams break game (2 players remaining) 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Both teams break game (2 players remaining)");//translate!	    break;	case "04": // Home team breaks game (2 players remaining) 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Home team breaks game (2 players remaining))");//translate!	    break;	case "05": // Away team breaks game (2 players remaining) 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Away team breaks game (2 players remaining)");//translate!	    break;	case "10": // Yellow card nasty play	    event.type=htlivesight.Events.type.YELLOW;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowNastyPlay",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).yellow +=1;	    htlivesight.Events.translate.addBooked(event, match);	    break;	case "11": // Yellow card cheating	    event.type=htlivesight.Events.type.YELLOW;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowCheating",htlivesight.data[0]));	    match.getSideById(event.subjectTeamId).yellow +=1;	    htlivesight.Events.translate.addBooked(event, match);	    break;	case "12": // Red card (2nd warning) nasty play	    event.type=htlivesight.Events.type.YELLOW2;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowNastyPlay",htlivesight.data[0]));	    htlivesight.Events.translate.addSentOff(event, match);	    htlivesight.LineUp.SentOffEvent(event, match);	    match.getSideById(event.subjectTeamId).yellow +=1;	    match.getSideById(event.subjectTeamId).red +=1;	    htlivesight.Events.translate.addBooked(event, match);	    break;	case "13": // Red card (2nd warning) cheating	    event.type=htlivesight.Events.type.YELLOW2;	    event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowCheating",htlivesight.data[0]));	    htlivesight.Events.translate.addSentOff(event, match);	    htlivesight.LineUp.SentOffEvent(event, match);	    match.getSideById(event.subjectTeamId).yellow +=1;	    match.getSideById(event.subjectTeamId).red +=1;	    htlivesight.Events.translate.addBooked(event, match);	    break;	case "14": // Red card without warning	    event.type=htlivesight.Events.type.RED;	    htlivesight.Events.translate.addSentOff(event, match);	    htlivesight.LineUp.SentOffEvent(event, match);	    match.getSideById(event.subjectTeamId).red +=1;	    break;	case "50": // indirect free kick rating? // no more present in official event type list	    event.type=htlivesight.Events.type.INFO;	    break;	    	case "97": // Second half started	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Second half started");//translate!	    break;	    	case "98": // Match started	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Match started");//translate!	    break;	case "99": // Match finished	    event.type=htlivesight.Events.type.END_MATCH;	    //event.special = new htlivesightEvent.special("Match finished");//translate!	    event.title = "Match finished";	    match.isFinish = true;	    break;	default:	    break;	};	break;    case "7": // 	switch (event.key.BC) {	case "00": // Taunt Opponent // no more present in official event type list	    event.type=htlivesight.Events.type.INFO;	    break;	case "01": // Congratulations to the winner	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Congratulations to the winner");//translate!	    break;	case "02": // Winner advances to next cup round (no relegation cup for loser)	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Winner advances to next cup round (no relegation cup for loser)");//translate!	    break;	case "03": // Winner advances to next cup round and loser relegates to cup X 	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Winner advances to next cup round and loser relegates to cup X");//translate!	    break;	case "04": // Match ended in a tie  	    event.type=htlivesight.Events.type.INFO;	    //event.special = new htlivesightEvent.special("Match ended in a tie");//translate!	    break;	default:	    break;	};	break;    default:	break;    };};/*************************************************************** * This function extract formation (4-4-2 3-5-2 etc using * regular expression in the eventtext of a particular event. ***************************************************************/htlivesight.Events.translate.parseFormation = function(txt) {    try{	var found=txt.match(/\d\-\d\-\d/);	if (found) {return found;}	else return "";    }    catch(e){console.log("Events.translate.parseFormation error:"+ e );};}; htlivesight.Events.translate.parseLineup = function(txt) {    var lineup = new Array();    try {	var l = txt.split(": ")[1];	var i;	var zones=l.split(" - ");	for(i=0,len=zones.length; i<len; i++) {	    lineup[lineup.length] = zones[i].split(", ");	}	i = lineup.length-1;	var j = lineup[i].length-1;	lineup[i][j] = lineup[i][j].substring(0, lineup[i][j].length-1);    }    catch (e) {alert("htlivesight.Events.translate.parseLineup error: "+e);	}    return lineup;};/************************************************************* * This function extract the arena name from event text. It * search for text between "> and </a>. ************************************************************/htlivesight.Events.translate.addArena = function(eventTxt){    try{	var	string=eventTxt.split(/"/);	var stringWithStadiumName="";	for(var i=2,len=string.length;i<len; i++) stringWithStadiumName+=string[i]+"\"";	var	string1=stringWithStadiumName.split("/a");	var	finalstring= string1[0].substring(4,string1[0].length-4);	return finalstring;		if (found) {return found[1];};    }    catch(e){alert("Events.translate.addArena error: "+ e );};}; htlivesight.Events.translate.addScorers = function(event, match) {    var team = event.match.getSideById(event.subjectTeamId);    if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup	lineUp= match.home.lineUp;    else	lineUp= match.away.lineUp;    /*     *  This part manage scorers name if player id is 0. Due to missing ID, they are collected in an     * Array counting ID from 0 and adding 1 for each scorer.     */      if (event.subjectPlayerId==0){ // no player ID	if (team.scorers == null) // initialize team scorers if not present	    team.scorers = new Array();	// getting scorer name from event text	var scorerName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);	// look if the scorer has already scored during the match, if so added the other minute goal	for(var index=0,len=team.scorers.length; index<len; index++){	    if (team.scorers[index].name==scorerName){		team.scorers[index].mins += "," + event.minute;		return;	    }	}	// if scorer scores for the first time, it add the scorer in the table.	team.scorers[team.scorers.length] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	team.scorers[team.scorers.length-1].mins += event.minute;	return;      }    /*     * This part manage scorers name with player id . Scorers are collected in an     *  Array to preserve time order     */    if (team.scorers == null){    	team.scorers = new Array();    }    for(i=0; i<team.scorers.length; i++){    	if(team.scorers[i].playerId == event.subjectPlayerId){    		team.scorers[i].mins += ","+event.minute;    		return;    	}    }	team.scorers.push(new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " ("+event.minute, event.subjectPlayerId));    /*     *  This part manage scorers name with player id . Scorers are collected in an     * Object with index=playerID.     */	/*if (team.scorers == null)    	team.scorers = new Object();    if (team.scorers[event.subjectPlayerId] == null ) {	team.scorers[event.subjectPlayerId] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");    } else {	team.scorers[event.subjectPlayerId].mins += ",";    }    team.scorers[event.subjectPlayerId].mins += event.minute;*/};htlivesight.Events.translate.addBooked = function(event, match) {    var team = event.match.getSideById(event.subjectTeamId);    if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup	lineUp= match.home.lineUp;    else	lineUp= match.away.lineUp;    /*     *  This part manage booked name if player id is 0. Due to missing ID, they are collected in an     * Array counting ID from 0 and adding 1 for each scorer.     */      if (event.subjectPlayerId==0){ // no player ID	if (team.booked == null) // initialize team booked if not present	    team.booked = new Array();	// getting scorer name from event text	var bookedName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);	// look if the scorer has already scored during the match, if so added the other minute goal	for(var index=0,len=team.booked.length; index<len; index++){	    if (team.booked[index].name==bookedName){		team.booked[index].mins += "," + event.minute;		return;	    }	}	// if scorer scores for the first time, it add the scorer in the table.	team.booked[team.booked.length] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	team.booked[team.booked.length-1].mins += event.minute;	return;      }    /*     * This part manage scorers name with player id . Booked are collected in an     *  Array to preserve time order     */    if (team.booked == null){    	team.booked = new Array();    }    for(i=0; i<team.booked.length; i++){    	if(team.booked[i].playerId == event.subjectPlayerId){    		team.booked[i].mins += ","+event.minute;    		return;    	}    }	team.booked.push(new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " ("+event.minute, event.subjectPlayerId));    /*     *  This part manage booked name with player id . booked are collected in an     * Object with index=playerID.     */      /*if (team.booked == null)	team.booked = new Object();    if (team.booked[event.subjectPlayerId] == null ) {	team.booked[event.subjectPlayerId] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");    } else {	team.booked[event.subjectPlayerId].mins += ",";    }    team.booked[event.subjectPlayerId].mins += event.minute;*/};/** * Sent Off part added by bigpapy in order to show sent off players in header. */htlivesight.Events.translate.addSentOff = function(event, match) {    var team = event.match.getSideById(event.subjectTeamId);    if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup	lineUp= match.home.lineUp;    else	lineUp= match.away.lineUp;    /*     *  This part manage sent_off name if player id is 0. Due to missing ID, they are collected in an     * Array counting ID from 0 and adding 1 for each scorer.     */      if (event.subjectPlayerId==0){ // no player ID	if (team.sent_off == null) // initialize team sent_off if not present	    team.sent_off = new Array();	// getting scorer name from event text	var sent_offName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);	// look if the scorer has already scored during the match, if so added the other minute goal	for(var index=0,len=team.sent_off.length; index<len; index++){	    if (team.sent_off[index].name==sent_offName){		team.sent_off[index].mins += "," + event.minute;		return;	    }	}	// if scorer scores for the first time, it add the scorer in the table.	team.sent_off[team.sent_off.length] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	team.sent_off[team.sent_off.length-1].mins += event.minute;	return;      }    /*     * This part manage scorers name with player id . Sent off are collected in an     *  Array to preserve time order     */    if (team.sent_off == null){    	team.sent_off = new Array();    }    for(i=0; i<team.sent_off.length; i++){    	if(team.sent_off[i].playerId == event.subjectPlayerId){    		team.sent_off[i].mins += ","+event.minute;    		return;    	}    }	team.sent_off.push(new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " ("+event.minute, event.subjectPlayerId));    /*     *  This part manage sent_off name with player id . sent_off are collected in an     * Object with index=playerID.     */      /*if (team.sent_off == null)	team.sent_off = new Object();    if (team.sent_off[event.subjectPlayerId] == null ) {	team.sent_off[event.subjectPlayerId] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");    } else {	team.sent_off[event.subjectPlayerId].mins += ",";    }    team.sent_off[event.subjectPlayerId].mins += event.minute;*/};htlivesight.Events.translate.addInjured = function(event, match) {    var team = event.match.getSideById(event.subjectTeamId);    if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup	lineUp= match.home.lineUp;    else	lineUp= match.away.lineUp;    /*     *  This part manage injured name if player id is 0. Due to missing ID, they are collected in an     * Array counting ID from 0 and adding 1 for each scorer.     */      if (event.subjectPlayerId==0){ // no player ID	if (team.injuries == null) // initialize team sent_off if not present	    team.injuries = new Array();	// getting injured name from event text	var injuredName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);	// look if the scorer has already scored during the match, if so added the other minute goal	for(var index=0,len=team.injuries.length; index<len; index++){	    if (team.injuries[index].name==injuredName){		team.injuries[index].mins += "," + event.minute;		return;	    }	}	// if scorer scores for the first time, it add the scorer in the table.	team.injuries[team.injuries.length] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	team.injuries[team.injuries.length-1].mins += event.minute;	return;      }    /*     * This part manage scorers name with player id . Injured are collected in an     *  Array to preserve time order     */    if (team.injuries == null){    	team.injuries = new Array();    }    for(i=0; i<team.injuries.length; i++){    	if(team.injuries[i].playerId == event.subjectPlayerId){    		team.injuries[i].mins += ","+event.minute;    		return;    	}    }	team.injuries.push(new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " ("+event.minute, event.subjectPlayerId));    /*     *  This part manage sent_off name with player id . sent_off are collected in an     * object with index=playerID.     */      /*if (team.injuries == null)	team.injuries = new Object();    if (team.injuries[event.subjectPlayerId] == null ) {	team.injuries[event.subjectPlayerId] =	    new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");    } else {	team.injuries[event.subjectPlayerId].mins += ",";    }    team.injuries[event.subjectPlayerId].mins += event.minute;*/};/*----------------------------------------------------------------------------------------- * This function try to solve the problem of finding the scorer player first and last name *------------------------------------------------------------------------------------------ */htlivesight.Events.translate.parseScorer = function(txt, id, lineUp) {    //split the text of the event in more strings every time it finds a "    var arrayTxtSplitted = txt.split(/"/);    // select the id of the player subject and return the name (two string forward)    for (var j=0;j<arrayTxtSplitted.length;j++){	var subArrayTxtSplitted = arrayTxtSplitted[j].split(/=/);	if (subArrayTxtSplitted[(subArrayTxtSplitted.length-1)]==id) {	    return htlivesight.Util.RemoveSpecialChar(arrayTxtSplitted[j+2]);	}    }    try{	for (var index=0; index<lineUp.length; index++){	    if  (txt.indexOf(lineUp[index].name)!=-1){		return lineUp[index].name; 	    } 	}    }catch(e){}};htlivesight.Events.Scorer= function (name, mins, playerId) {    this.name = name;    this.mins = mins;    this.playerId = playerId;};htlivesight.Events.eventMap = {				"019":	 	"Players enter the field",		"020":	 	"Tactical disposition",		"021":		"Player names in lineup",		"022":		"Players from neighborhood used",		"023":		"Same formation both teams",		"024":		"Team formations (different)",		"025":		"Regional derby",		"026":		"Neutral ground",		"027":		"Away is actually home",		"030":		"Spectators/venue - rain",		"031":		"Spectators/venue - cloudy",		"032":		"Spectators/venue - fair weather",		"033":		"Spectators/venue - sunny",		"040":		"Dominated",		"041":		"Best player",		"042":		"Worst player",		"045":		"Half time results",		"046":		"Hat-trick comment",		"047":		"No team dominated",		"055":		"Penalty contest: Goal by Technical (no nerves)",		"056":		"Penalty contest: Goal, no nerves",		"057":		"Penalty contest: Goal in spite of nerves",		"058":		"Penalty contest: No goal because of nerves",		"059":		"Penalty contest: No goal in spite of no nerves",		"060":		"Underestimation",		"061":	 	"Organization breaks",		"062":		"Withdraw",		"063":		"Remove underestimation at pause",		"064":		"Reorganize",		"065":		"Nerves in important thrilling game",		"066":		"Remove underestimation at pause (goaldiff = 0)",		"067":		"Remove underestimation at pause (goaldiff = 1)",		"068":		"Successful pressing",		"069":		"Remove underestimation",		"070":		"Extension",		"071":		"Penalty contest (after extension)",		"072":		"Extension decided",		"073":		"After 22 penalties tossing coin!",		"075":		"Added time",		"076":		"No added time",		"080":		"New captain",		"081":		"New set pieces taker",		"090":		"Injured but keeps playing",		"091":		"Moderately injured, leaves field",		"092":		"Badly injured, leaves field",		"093":		"Injured and no replacement existed",		"094":		"Injured after foul but continues",		"095":		"Injured after foul and exits",		"096":		"Injured after foul and no replacement existed",		"097":		"Keeper injured, field player has to take his place",		100:	"Reducing goal home team free kick",		101:	"Reducing goal home team middle",		102:	"Reducing goal home team left wing",		103:	"Reducing goal home team right wing",		104:	"Reducing goal home team penalty kick normal",		105:	"SE: Goal Unpredictable long pass",		106:	"SE: Goal Unpredictable scores on his own",		107:	"SE: Goal longshot",		108:	"SE: Goal Unpredictable special action",		109:	"SE: Goal Unpredictable mistake",		110:	"Equalizer goal home team free kick",		111:	"Equalizer goal home team middle",		112:	"Equalizer goal home team left wing",		113:	"Equalizer goal home team right wing",		114:	"Equalizer goal home team penalty kick normal",		115:	"SE: Quick scores after rush",		116:	"SE: Quick rushes, passes and receiver scores",		117:	"SE: Tired defender mistake, striker scores",		118:	"SE Goal: Corner to anyone",		119:	"SE: Goal Corner: Head specialist",		120:	"Goal to take lead home team free kick",		121:	"Goal to take lead home team middle",		122:	"Goal to take lead home team left wing",		123:	"Goal to take lead home team right wing",		124:	"Goal to take lead home team penalty kick normal",		125:	"SE: Goal: Unpredictable, own goal",		130:	"Increase goal home team free kick",		131:	"Increase goal home team middle",		132:	"Increase goal home team left wing",		133:	"Increase goal home team right wing",		134:	"Increase goal home team penalty kick normal",		135:	"SE: Experienced forward scores",		136:	"SE: Inexperienced defender causes goal",		137:	"SE: Winger to Head spec. Scores",		138:	"SE: Winger to anyone Scores",		139:	"SE: Technical goes around head player",		140:	"Counter attack goal, free kick",		141:	"Counter attack goal, middle",		142:	"Counter attack goal, left",		143:	"Counter attack goal, right",		150:	"Reducing goal away team free kick",		151:	"Reducing goal away team middle",		152:	"Reducing goal away team left wing",		153:	"Reducing goal away team right wing",		154:	"Reducing goal away team penalty kick normal",		160:	"Equalizer goal away team free kick",		161:	"Equalizer goal away team middle",		162:	"Equalizer goal away team left wing",		163:	"Equalizer goal away team right wing",		164:	"Equalizer goal away team penalty kick normal",		170:	"Goal to take lead away team free kick",		171:	"Goal to take lead away team middle",		172:	"Goal to take lead away team left wing",		173:	"Goal to take lead away team right wing",		174:	"Goal to take lead away team penalty kick normal",		180:	"Increase goal away team free kick",		181:	"Increase goal away team middle",		182:	"Increase goal away team left wing",		183:	"Increase goal away team right wing",		184:	"Increase goal away team penalty kick normal",		185:	"Goal indirect free kick",		186:	"Counter attack goal, indirect free kick",		187:	"Goal long shot",		200:	"No reducing goal home team free kick",		201:	"No reducing goal home team middle",		202:	"No reducing goal home team left wing",		203:	"No reducing goal home team right wing",		204:	"No reducing goal home team penalty kick normal",		205:	"SE: No Goal Unpredictable long pass",		206:	"SE: No Goal Unpredictable almost scores",		207: 	"SE: No Goal longshot",		208:	"SE: No Goal Unpredictable special action",		209:	"SE: No Goal Unpredictable mistake",		210:	"No equalizer goal home team free kick",		211:	"No equalizer goal home team middle",		212:	"No equalizer goal home team left wing",		213:	"No equalizer goal home team right wing",		214:	"No equalizer goal home team penalty kick normal",		215:	"SE: Speedy misses after rush",		216:	"SE: Quick rushes, passes but receiver fails",		217:	"SE: Tired defender mistake but no goal",		218:	"SE No goal: Corner to anyone",		219:	"SE: No Goal Corner: Head specialist",		220: 	"No goal to take lead home team free kick",		221: 	"No goal to take lead home team middle",		222:	"No goal to take lead home team left wing",		223:	"No goal to take lead home team right wing",		224:	"No goal to take lead home team penalty kick normal",		225:	"SE: No goal: Unpredictable, own goal almost",		230:	"No increase goal home team free kick",		231:	"No increase goal home team middle",		232:	"No increase goal home team left wing",		233:	"No increase goal home team right wing",		234:	"No increase goal home team penalty kick normal",		235:	"SE: Experienced forward fails to score",		236:	"SE: Inexperienced defender almost causes goal",		237:	"SE: Winger to someone: No goal",		239:	"SE: Technical goes around head player, no goal",		240:	"Counter attack, no goal, free kick",		241:	"Counter attack, no goal, middle",		242:	"Counter attack, no goal, left",		243:	"Counter attack, no goal, right",		250:	"No reducing goal away team free kick",		251:	"No reducing goal away team middle",		252:	"No reducing goal away team left wing",		253:	"No reducing goal away team right wing",		254:	"No reducing goal away team penalty kick normal",		260:	"No equalizer goal away team free kick",		261:	"No equalizer goal away team middle",		262:	"No equalizer goal away team left wing",		263:	"No equalizer goal away team right wing",		264:	"No equalizer goal away team penalty kick normal",		270:	"No goal to take lead away team free kick",		271:	"No goal to take lead away team middle",		272:	"No goal to take lead away team left wing",		273:	"No goal to take lead away team right wing",		274:	"No goal to take lead away team penalty kick normal",		280:	"No increase goal away team free kick",		281:	"No increase goal away team middle",		282:	"No increase goal away team left wing",		283:	"No increase goal away team right wing",		284:	"No increase goal away team penalty kick normal",		285: 	"No goal indirect free kick",		286:	"Counter attack, no goal, indirect free kick",		287:	"No goal long shot",		288:	"No goal long shot, defended",		289:	"SE: Quick rushes, stopped by quick defender",		301:	"SE: Technical suffers from rain",		302:	"SE: Powerful thrives in rain",		303:	"SE: Technical thrives in sun",		304:	"SE: Powerful suffers from sun",		305:	"SE: Quick loses in rain",		306:	"SE: Quick loses in sun",		331:	"Tactic Type: Pressing",		332:	"Tactic Type: Counter-attacking",		333:	"Tactic Type: Attack in middle",		334:	"Tactic Type: Attack on wings",		335:	"Tactic Type: Play creatively",		336:	"Tactic Type: Long shots",		343:	"Tactic: Attack in middle used",		344:	"Tactic: Attack on wings used",		350:	"Player substitution: team is behind",		351:	"Player substitution: team is ahead",		352:	"Player substitution: minute",		360:	"Change of tactic: team is behind",		361:	"Change of tactic: team is ahead",		362:	"Change of tactic: minute",		370:	"Player position swap: team is behind",		371:	"Player position swap: team is ahead",		372:	"Player position swap: minute",		450:	"Player got third yellow card misses next match",		451:	"With this standing team x will relegate to cup y",		452:	"Player current team matches 100s anniversary",		453:	"Player possibly the last game in this team",		454:	"Doctor report of injury length",		455:	"New star player of the team",		456:	"Player career goals multiple of 50",		457:	"Player league goals this season",		458:	"Player cup goals this season",		459:	"Bench player warming up",		460:	"Fans shocked by losing",		461:	"Fans upset by losing",		462:	"Fans surprised by winning",		463:	"Fans excited by winning",		464:	"Exact number of spectators",		465:	"Team should win match to secure winning the league",		466:	"Team should win match to have chance of winning league",		467:	"The winner of this match (if there is one) can have a chance of winning the league",		468:	"Team should win match to make sure they don't demote",		469:	"Team should win match to have a chance of not demoting",		470:	"The loser of this match will demote",		500:	"Both teams walkover",		501:	"Home team walkover",		502:	"Away team walkover",		503:	"Both teams break game (2 players remaining)",		504:	"Home team breaks game (2 players remaining)",		505:	"Away team breaks game (2 players remaining)",		510:	"Yellow card nasty play",		511:	"Yellow card cheating",		512:	"Red card (2nd warning) nasty play",		513:	"Red card (2nd warning) cheating",		514:	"Red card without warning",		597:	"Second half started",		598:	"Match started",		599:	"Match finished",		601:	"Congratulations to the winner",		602:	"Winner advances to next cup round (no relegation cup for loser)",		603:	"Winner advances to next cup round and loser relegates to cup X",		604:	"Match ended in a tie",}