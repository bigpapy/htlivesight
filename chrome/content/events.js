htlivesight.Events={};htlivesight.Events = function() {};htlivesightEvent.type = function(id, imageSrc, imageSrcOld, text, mysound, opsound, frsound, opfrsound, otsound, color) {	this.id = id; //	this.imageSrc = imageSrc;//	this.imageSrcOld = imageSrcOld;	this.text = text; // text for slider	this.mysound = mysound; // mysound for slider (my team)	this.opsound = opsound; // opsound for slider (opponent my team)	this.frsound = frsound; // frsound for slider (friend team)	this.opfrsound = opfrsound; // frsound for slider (opponent friend team)	this.otsound = otsound; // frsound for slider (other team)	this.color = color;};htlivesightEvent.special = function(txt, img) {	this.txt = txt;	this.imgSrc = img;};function htlivesightEvent (i, m, sp, st, op, k, t) {	var zeroLead = function(key) {		var zeros = ["000", "00", "0", ""];		var id = key.split("_")[0];		return zeros[id.length]+id;	};	var keyId = zeroLead(k);	this.index = i;	this.minute = m;	this.subjectPlayerId = sp;	this.subjectTeamId = st;	this.objectPlayerId = op;	this.key = {			txt: k,			ABC: keyId,			A: keyId[0],			B: keyId[1],			C: keyId[2],			AB: keyId[0]+keyId[1],			BC: keyId[1]+keyId[2]	};	this.match = null,	this.text = t;	this.type = htlivesight.Events.type.NONE;	this.special = null;};htlivesightEvent.prototype.isInfo = function() {	return (			this.type == htlivesight.Events.type.INFO			|| (this.minute == 0 && !htlivesight.prefs.personalization.weather &&					(this.type == htlivesight.Events.type.SUN							|| this.type == htlivesight.Events.type.FEW_CLOUDS							|| this.type == htlivesight.Events.type.OVERCAST							|| this.type == htlivesight.Events.type.RAIN 					) 			)|| ((this.type == htlivesight.Events.type.END_HALF || this.type == htlivesight.Events.type.END_MATCH )					&& !htlivesight.prefs.personalization.whistleTime)					|| ((this.type == htlivesight.Events.type.SUN || this.type == htlivesight.Events.type.RAIN) 							&& !htlivesight.prefs.personalization.weatherSE)	);};htlivesight.Events.type = {		GOAL: new htlivesightEvent.type(10, htlivesight.Image.event.goal, null, "EventGoal", htlivesight.Sound.sample.mygoal, htlivesight.Sound.sample.opgoal, htlivesight.Sound.sample.frgoal, htlivesight.Sound.sample.opfrgoal, htlivesight.Sound.sample.otgoal, htlivesight.Notify.color.green),		PENALTY_GOAL: new htlivesightEvent.type(15, htlivesight.Image.event.penalty_goal, null, "EventPenaltyGoal", htlivesight.Sound.sample.mygoal, htlivesight.Sound.sample.opgoal, htlivesight.Sound.sample.frgoal, htlivesight.Sound.sample.opfrgoal, htlivesight.Sound.sample.otgoal, htlivesight.Notify.color.green),		PENALTY_MISS: new htlivesightEvent.type(16, htlivesight.Image.event.penalty_miss, null, "EventPenaltyMiss", htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.miss, htlivesight.Notify.color.red),		INJURY: new htlivesightEvent.type(20, htlivesight.Image.event.injury, null, "EventInjury", htlivesight.Sound.sample.myboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Sound.sample.opboo, htlivesight.Notify.color.red),		RED: new htlivesightEvent.type(30, htlivesight.Image.event.red, null, "EventRed", htlivesight.Sound.sample.mysentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Notify.color.red),		YELLOW2: new htlivesightEvent.type(40, htlivesight.Image.event.yellow2, null, "EventYellow2", htlivesight.Sound.sample.mysentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Sound.sample.othersentoff, htlivesight.Notify.color.red),		BRUISED: new htlivesightEvent.type(50, htlivesight.Image.event.bruised, null, null, htlivesight.Sound.sample.mybruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Sound.sample.otherbruised, htlivesight.Notify.color.orange),		YELLOW: new htlivesightEvent.type(60, htlivesight.Image.event.yellow, null, null, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Sound.sample.whistle, htlivesight.Notify.color.yellow),		MISS: new htlivesightEvent.type(70, htlivesight.Image.event.miss, null, null, htlivesight.Sound.sample.miss, htlivesight.Sound.sample.missOther, htlivesight.Sound.sample.missFriend, htlivesight.Sound.sample.missOther, htlivesight.Sound.sample.missOther, htlivesight.Notify.color.grey),		SUN: new htlivesightEvent.type(80, htlivesight.Image.event.sun, htlivesight.ImageOld.event.sun, null, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun, htlivesight.Sound.sample.sun),		FEW_CLOUDS: new htlivesightEvent.type(90,htlivesight.Image.event.few_clouds, htlivesight.ImageOld.event.few_clouds, null, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds, htlivesight.Sound.sample.few_clouds),		OVERCAST: new htlivesightEvent.type(100, htlivesight.Image.event.overcast, htlivesight.ImageOld.event.overcast, null, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast, htlivesight.Sound.sample.overcast),		RAIN: new htlivesightEvent.type(110, htlivesight.Image.event.rain, htlivesight.ImageOld.event.rain, null, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain, htlivesight.Sound.sample.rain),		HATTRICK: new htlivesightEvent.type(120, htlivesight.Image.event.hattrick, htlivesight.ImageOld.event.hattrick, null, htlivesight.Sound.sample.tarzan, null, htlivesight.Sound.sample.tarzan, null, htlivesight.Sound.sample.tarzan),		PRESSING: new htlivesightEvent.type(130, htlivesight.Image.event.pressing,null, null,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing,htlivesight.Sound.sample.pressing),		SUB: new htlivesightEvent.type(140, htlivesight.Image.event.substitute, htlivesight.ImageOld.event.substitute),		SWAP: new htlivesightEvent.type(150, htlivesight.Image.event.swap, htlivesight.ImageOld.event.swap),		END_MATCH: new htlivesightEvent.type(160, htlivesight.Image.event.info, htlivesight.ImageOld.event.info, null, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end, htlivesight.Sound.sample.end),		END_HALF: new htlivesightEvent.type(170, htlivesight.Image.event.info, htlivesight.ImageOld.event.info, null, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half, htlivesight.Sound.sample.end_half),		BEGINNING: new htlivesightEvent.type(180, htlivesight.Image.transparent, null, null, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning, htlivesight.Sound.sample.beginning),		INFO: new htlivesightEvent.type(200, htlivesight.Image.event.info, htlivesight.ImageOld.event.info),		NONE: new htlivesightEvent.type(1000, htlivesight.Image.transparent)};/* ---------------------------------------------------------------- * commun Parse functions * ---------------------------------------------------------------- */htlivesight.Events.ParseList = function(xml,minutes) {	var event, index;	var events = new Object();	var eventNode;	try {		var first=Number.MAX_VALUE, last=0;		var eventsNode = xml.getElementsByTagName("Event");		if(htlivesight.prefs.other.reLiveByEvent && htlivesight.prefs.other.reLive){			var maxEvent=minutes;			var jumpevent=0;			try{				var indexStart=xml.getElementsByTagName("Event")[0].attributes.getNamedItem("Index").value;				for(var j=0;j<= Math.min((maxEvent+jumpevent-indexStart), eventsNode.length-1)/*eventsNode.length*/ ;j++){					eventNode = eventsNode[j];					index=xml.getElementsByTagName("Event")[j].attributes.getNamedItem("Index").value;					event = htlivesight.Events.ParseEvent(eventNode,index);					minutes=event.minute;					if ((j+1)<eventsNode.length){						eventNode = eventsNode[j+1];						var indexNext=xml.getElementsByTagName("Event")[j+1].attributes.getNamedItem("Index").value;						var nextEvent = htlivesight.Events.ParseEvent(eventNode,indexNext);						htlivesight.Time.reLiveMinute=0;						var endEventList=false;						if (event.minute==nextEvent.minute) {							jumpevent++;						}					}else{						htlivesight.Time.reLiveMinute=Number.MAX_VALUE;					};					first = Math.min(first, event.index);					last = Math.max(last, event.index);					events["_" + event.index] = event;				};			}catch(e){/*alert("error relive by event "+ e);*/}		}else for(var j=0, len=eventsNode.length;j< len ;j++){			eventNode = eventsNode[j];			index=xml.getElementsByTagName("Event")[j].attributes.getNamedItem("Index").value;			event = htlivesight.Events.ParseEvent(eventNode,index);			if ((htlivesight.prefs.other.reLive) && (event.minute > minutes)){			}else{				first = Math.min(first, event.index);				last = Math.max(last, event.index);				events["_" + event.index] = event;			}		}		events.first = first;		events.last = last;	} catch(e) {alert("Events.ParseList() : " + e);}	return events;};htlivesight.Events.ParseEvent = function(xml,index) {	try {		return new htlivesightEvent(				index,				htlivesight.Events.ParseMinute(xml),				htlivesight.Events.ParseSubjectPlayerId(xml),				htlivesight.Events.ParseSubjectTeamId(xml),				htlivesight.Events.ParseObjectPlayerId(xml),				htlivesight.Events.ParseKey(xml),				htlivesight.Events.ParseText(xml)		);	} catch(e) {alert("Event.ParseEvent : " + e);}	return null;};htlivesight.Events.ParseIndex = function (xml) {	var indexStr = htlivesight.Util.Parse("Event", xml);	return parseInt(indexStr, 10);};htlivesight.Events.ParseMinute = function (xml) {	return htlivesight.Util.Parse("Minute", xml);};htlivesight.Events.ParseSubjectPlayerId = function (xml) {	return htlivesight.Util.Parse("SubjectPlayerID", xml);};htlivesight.Events.ParseObjectPlayerId = function (xml) {	return htlivesight.Util.Parse("ObjectPlayerID", xml);};htlivesight.Events.ParseSubjectTeamId = function (xml) {	return htlivesight.Util.Parse("SubjectTeamID", xml);};htlivesight.Events.ParseKey = function (xml) {	return htlivesight.Util.Parse("EventKey", xml);};/**************************************************************** * This function extract event text from xml file. There are some * event which has a "" content (from 550_0 to 550_9) so return * function will give back "" ****************************************************************/htlivesight.Events.ParseText = function (xml) {	if (htlivesight.Util.Parse("EventText", xml) == null) return "";	return htlivesight.Util.Parse("EventText", xml);};/** -------------------------------------------- * - translates the type of event. * -------------------------------------------- * - if it is an information event, adds that information to the match * - (weather, team formation, etc) * -  * - otherwise, sets actionEvent flag to true;  * -------------------------------------------- */htlivesight.Events.translate = function (match, event) {	var team;	event.match = match;	if (htlivesight.prefs.other.printEventKey && event.text!="") 	{		event.text= "(" + event.key.A + event.key.BC + ") " + event.text;	};	switch (event.key.A) {	case "0": //match information/statistics		switch (event.key.BC) {		case "11": // formation			event.type=htlivesight.Events.type.BEGINNING;			break;		case "20": // formation			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).formation = htlivesight.Events.translate.parseFormation(event.text);			break;		case "21": // lineup			team = match.getTeamById(event.subjectTeamId);			event.type=htlivesight.Events.type.INFO;			var stringLineUp= htlivesight.LineUp.LineUpEvent(event, match);			if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup				var side="home";			else				var side="away";			event.lineupElement = htlivesight.DOM.createLineupElement(side+"_team_formation_"+match.id+"_"+match.sourceSystem+"_table", htlivesight.Events.translate.parseLineup(htlivesight.Util.CleanText(stringLineUp)),event);			$( "#"+side+"_team_formation_" + match.id + "_" + match.sourceSystem+"_table").tabs();			$( "#"+side+"_team_formation_" + match.id + "_" + match.sourceSystem).effect("pulsate","swing", 40);			break;		case "22": //  	YouthTeam, players from neighborhood used  (no lineup info)			team = match.getTeamById(event.subjectTeamId);			event.type=htlivesight.Events.type.INFO;			break;		case "25": // derby			event.type=htlivesight.Events.type.INFO;			break;		case "26": // neutral ground			event.type=htlivesight.Events.type.INFO;			break;		case "27": // away team plays home			event.type=htlivesight.Events.type.INFO;			break;		case "30": // weather rain			event.type=htlivesight.Events.type.RAIN;			match.weather.image = htlivesight.Image.weather.rain;			match.arena.attendance = event.objectPlayerId;			match.arena.name = htlivesight.Events.translate.addArena(event.text); //bigpapy			break;		case "31": // heavy clouds			event.type=htlivesight.Events.type.OVERCAST;			match.weather.image = htlivesight.Image.weather.overcast;			match.arena.attendance  = event.objectPlayerId;			match.arena.name = htlivesight.Events.translate.addArena(event.text); //bigpapy			break;		case "32": // low clouds			event.type=htlivesight.Events.type.FEW_CLOUDS;			match.weather.image = htlivesight.Image.weather.few_clouds;			match.arena.attendance  = event.objectPlayerId;			match.arena.name = htlivesight.Events.translate.addArena(event.text); // bigpapy			break;		case "33": // sun			event.type=htlivesight.Events.type.SUN;			match.weather.image = htlivesight.Image.weather.sun;			match.arena.attendance  = event.objectPlayerId;			match.arena.name = htlivesight.Events.translate.addArena(event.text);//bigpapy			break;		case "40": // possession rate			// subjectTeamId: team id;  objectPlayerId: rate			event.type=htlivesight.Events.type.INFO;			var rate= parseInt(event.objectPlayerId);			if(event.minute == 45){				match.home.possession_1=100-rate;				match.away.possession_1=100-rate;				match.getSideById(event.subjectTeamId).possession_1 =rate;			}else if (event.minute == 90){				match.home.possession_2=100-rate;				match.away.possession_2=100-rate;				match.getSideById(event.subjectTeamId).possession_2 =rate;			}			break;		case "41": // best player			// subjectPlayerId: player id; subjectTeamId: team id 			event.type=htlivesight.Events.type.INFO;			break;		case "42": // worst player			event.type=htlivesight.Events.type.INFO;			break;		case "45": // halftime			event.type=htlivesight.Events.type.END_HALF;			break;		case "46": // hat-trick			event.type=htlivesight.Events.type.HATTRICK;			break;		case "47": // ball possession 50-50			event.type=htlivesight.Events.type.INFO;			if (event.minute == 45){				match.home.possession_1 =50;				match.away.possession_1 =50;			}else if (event.minute == 90){				match.home.possession_2 =50;				match.away.possession_2 =50;			}			break;		case "55":		case "56": // Penalty time: score			event.type=htlivesight.Events.type.PENALTY_GOAL;			htlivesight.Events.translate.addScorers(event, match);			break;		case "57": // Penalty time: nervous and scores			event.type=htlivesight.Events.type.PENALTY_GOAL;			htlivesight.Events.translate.addScorers(event, match);			break;		case "58": // Penalty time: nervous and miss			event.type=htlivesight.Events.type.PENALTY_MISS;			break;		case "59": // Penalty time: goalkeeper gets ball			event.type=htlivesight.Events.type.PENALTY_MISS;			break;		case "60": // over-confidence			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Underestimation",htlivesight.data[0]));			break;		case "61": // low formation experience			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("OrganizationBreaks",htlivesight.data[0]));			break;		case "62": // pull back to defende lead			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Pullback",htlivesight.data[0]));			break;		case "63": // half time briefing - organization up (after over-confidence)			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationRemove",htlivesight.data[0]));			break;		case "64": // half time briefing - organization up (?)			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Reorganize",htlivesight.data[0]));			break;		case "65": // low team experience - organization down			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("NervesImportantThrillingGame",htlivesight.data[0]));			break;		case "66": // low team experience - organization down			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationReduceDouble",htlivesight.data[0]));			break;		case "67": // low team experience - organization down			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationReduceOnce",htlivesight.data[0]));			break;		case "68": // pressing successful			event.type=htlivesight.Events.type.PRESSING;			break;		case "69": // remove over-confidence			event.type=htlivesight.Events.type.INFO;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("UnderestimationRemove",htlivesight.data[0]));			break;		case "70": // extra time start			//event.type=htlivesight.Events.type.INFO;			event.type=htlivesight.Events.type.END_HALF;			break;		case "71": // extra time over. draw. penalties 			//event.type=htlivesight.Events.type.INFO;			event.type=htlivesight.Events.type.END_HALF;			break;		case "72": // extra time over. one team win 			// subjectTeamId: wining team id			event.type=htlivesight.Events.type.INFO;			break;		case "73": // toss coin 			// subjectTeamId: wining team id			event.type=htlivesight.Events.type.INFO;			break;			case "80": // new captain 			event.type=htlivesight.Events.type.INFO;//			htlivesight.LineUp.newCaptainEvent(event, match);			break;		case "90": // injury. bruised. continues playing 			event.type=htlivesight.Events.type.BRUISED;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Bruised",htlivesight.data[0]));			break;		case "91": // injury. Get off 			event.type=htlivesight.Events.type.INJURY;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("ModeratelyInjuried",htlivesight.data[0])+" (+1/+3)");			htlivesight.Events.translate.addInjured(event, match);			htlivesight.LineUp.InjuryWithReplaceEvent(event, match); 			match.getSideById(event.subjectTeamId).injured +=1;			break;		case "92": // injury. heavy. get out 			event.type=htlivesight.Events.type.INJURY;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("BadlyInjuried",htlivesight.data[0])+ "(+3/+4)");			htlivesight.Events.translate.addInjured(event, match);			htlivesight.LineUp.InjuryWithReplaceEvent(event, match);			match.getSideById(event.subjectTeamId).injured +=1;			break;		case "93": // injury. heavy. no substitution			event.type=htlivesight.Events.type.INJURY;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0]));			htlivesight.Events.translate.addInjured(event, match);			htlivesight.LineUp.SentOffEvent(event, match);			match.getSideById(event.subjectTeamId).injured +=1;			break;		case "94": // bruised but keeps playing after medical aid.			event.type=htlivesight.Events.type.BRUISED;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Bruised",htlivesight.data[0]));			break;		case "95": // injury			event.type=htlivesight.Events.type.INJURY;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0]));			htlivesight.Events.translate.addInjured(event, match);			htlivesight.LineUp.InjuryWithReplaceEvent(event, match);			match.getSideById(event.subjectTeamId).injured +=1;			break;		case "96": // injury. no substitution			event.type=htlivesight.Events.type.INJURY;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("Injuried",htlivesight.data[0]));			htlivesight.Events.translate.addInjured(event, match);			htlivesight.LineUp.SentOffEvent(event, match);			match.getSideById(event.subjectTeamId).injured +=1;			break;		case "97": // missing keeper			event.type=htlivesight.Events.type.INFO;			htlivesight.LineUp.MissingKeeperEvent(event, match);			break;		default:			break;		}		break;	case "1": // goal	case "2": // missed goal		if (event.key.A == 1) {			event.type=htlivesight.Events.type.GOAL;			htlivesight.Events.translate.addScorers(event, match);		} else {			event.type=htlivesight.Events.type.MISS;		}		switch (event.key.BC) {		case "05": // Unpredictable (create pass, other player finishes)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableLongPass",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "06": // Unpredictable (intercept pass, finishes himself)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableScoresOnHisOwn",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "07": // Long Shot (scores)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLongShot",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			match.getSideById(event.subjectTeamId).long_shot +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).long_shot_goal +=1;			break;		case "08": // Unpredictable (get the ball from opponent, finishes himself)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableSpecialAction",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "09": // Unpredictable (give the ball to opponent, opponent finishes)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableMistake",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "15": // Quick Attacker (scores himself)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickScoresAfterRush",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "16": // (passes to other attacker, other attacker finishes)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickAssist",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "17": // Low Stamina (give the ball to opponent, opponent finishes)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLowStamina",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "18": // Corner (scores)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialCornerKick",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "19": // Corner+Header (scores)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialCornerKick",htlivesight.data[0]));			event.special.txt = event.special.txt + ", " + htlivesight.Util.Parse("EventSpecialHead",htlivesight.data[0]);			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "25": // Unpredictable, own goal conclusion 			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialUnpredictableOwnGoal",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "35": // Experienced Attacker (finishes himself)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("ExperiencedForward",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "36": // Low Experience (opponent scores)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLowExperience",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "37": // Cross Pass (create pass, other player finishes)			if (event.key.A == 1) event.special = new htlivesightEvent.special(htlivesight.Util.Parse("WingerHead",htlivesight.data[0]));			else event.special =new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialWinger",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "38": // Exceptional Passing (create pass, other player finishes)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialWinger",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "39": // Technical Attacker vs Head Defender (finishes himself)			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialTechnical",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		case "85": // Indirect Free Kick		case "86":			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialIndirect",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).free_kick +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).free_kick_goal +=1;			break;		case "87": // long shots			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("LongShot",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.long_shots")*/ htlivesight.Util.Parse("TacticLongShots",htlivesight.data[0]);			match.getSideById(event.subjectTeamId).occasion +=1;			match.getSideById(event.subjectTeamId).long_shot +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).long_shot_goal +=1;			break;		case "88":			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialLongShotDefended",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).occasion +=1;			match.getSideById(event.subjectTeamId).long_shot +=1;			break;		case "89":			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSpecialQuickVsQuick",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).special_event +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).special_event_goal +=1;			break;		}		/*switch (event.key.B) {				case "0": // away leads, home redude				case "1": // away leads, home evens				case "2": // draw, home leads				case "3": // home leads, home increase				case "4": // counter-attack				case "5": // home leads, away redude				case "6": // home leads, away evens				case "7": // draw, away leads				case "8": // away leads, away increase					break;			}*/		switch (event.key.C) {		case "0" : // Free Kick			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideFreeKick",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).free_kick +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).free_kick_goal +=1;			break;						case "1" : // Center			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideCenter",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).center +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).center_goal+=1;			break;						case "2" : // Left			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideLeft",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).left +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).left_goal+=1;			break;						case "3" : // Right			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSideRight",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).right +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).right_goal +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			break;						case "4" : // Penalty			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("EventSidePenalty",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).penalty +=1;			match.getSideById(event.subjectTeamId).occasion +=1;			if(event.key.A == 1)match.getSideById(event.subjectTeamId).penalty_goal +=1;			break;		}		if (event.key.B == "4" || event.key.BC == "86") { // Counter-Attack			event.special.txt = (htlivesight.Util.Parse("EventSpecialCounterAttack",htlivesight.data[0])					+ ", " + event.special.txt);		}		break;	case "3": // special tactics		switch (event.key.BC) {		case "01": // Rain & technical - performance down			event.type=htlivesight.Events.type.RAIN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialTechnicalRain",htlivesight.data[0]));			break;		case "02": // Rain & powerful - performance up			event.type=htlivesight.Events.type.RAIN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialPowerfulRain",htlivesight.data[0]));			break;		case "05": // Rain & quick - performance down			event.type=htlivesight.Events.type.RAIN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialQuickRain",htlivesight.data[0]));			break;      		case "03": // Sun & technical - performance up			event.type=htlivesight.Events.type.SUN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialTechnicalSun",htlivesight.data[0]));			break;		case "04": // Sun & powerful - performance down			event.type=htlivesight.Events.type.SUN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialPowerfulSun",htlivesight.data[0]));			break;		case "06": // Sun & quick - performance down			event.type=htlivesight.Events.type.SUN;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("MeteoSpecialQuickSun",htlivesight.data[0]));			break;      		case "31": // pressing			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticPressing",htlivesight.data[0]);			break;		case "32": // counter-attack			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticCA",htlivesight.data[0]);			break;		case "33": // attack in the middle			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]);			break;		case "34": // attack on wings			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic =htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]);			break;		case "35": // play creatively			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.play_creative")*/htlivesight.Util.Parse("TacticPlayCreative",htlivesight.data[0]);			break;		case "36": // long shots			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.long_shots")*/htlivesight.Util.Parse("TacticLongShots",htlivesight.data[0]);			break;		case "43": // attack in the middle			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.aim")*/htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]);			event.special =  new htlivesightEvent.special(/*strings.getString("tactic.aim")*/htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]));			break;		case "44": // attack on wings //add by bigpapy			event.type=htlivesight.Events.type.INFO;			match.getSideById(event.subjectTeamId).tactic = /*strings.getString("tactic.aow")*/htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]);			event.special =  new htlivesightEvent.special(/*strings.getString("tactic.aow")*/htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]));			break;		case "50": // substitution			event.type=htlivesight.Events.type.SUB;			try{				htlivesight.LineUp.SubstitutionEvent(event, match);			}catch(e){alert("event substitution. Error="+e);} 			break;		case "51": // substitution			event.type=htlivesight.Events.type.SUB;			try{				htlivesight.LineUp.SubstitutionEvent(event, match);			}catch(e){alert("event substitution. Error="+e);} 			break;		case "52": // substitution			event.type=htlivesight.Events.type.SUB;			try{				htlivesight.LineUp.SubstitutionEvent(event, match);			}catch(e){alert("event substitution. Error="+e);} 			break;		case "60": // tactic change			event.type=htlivesight.Events.type.INFO;			try{				htlivesight.LineUp.IndividualOrderEvent(event, match);			}catch(e){alert("event tactic change. Error="+e);} 			break;		case "61": // tactic change			event.type=htlivesight.Events.type.INFO;			try{				htlivesight.LineUp.IndividualOrderEvent(event, match);			}catch(e){alert("event tactic change. Error="+e);} 			break;		case "62": // tactic change			event.type=htlivesight.Events.type.INFO;			try{				htlivesight.LineUp.IndividualOrderEvent(event, match);			}catch(e){alert("event tactic change. Error="+e);} 			break;		case "70": // tactic change: swap position			event.type=htlivesight.Events.type.SWAP;			try{				htlivesight.LineUp.SwapEvent(event, match);			}catch(e){alert("event swap position. Error="+e);} 			break;		case "71": // tactic change: swap position			event.type=htlivesight.Events.type.SWAP;			try{				htlivesight.LineUp.SwapEvent(event, match);			}catch(e){alert("event swap position. Error="+e);} 			break;		case "72": // tactic change: swap position			event.type=htlivesight.Events.type.SWAP;			try{				htlivesight.LineUp.SwapEvent(event, match);			}catch(e){alert("event swap position. Error="+e);} 			break;		default:			break;		};		break;	case "4": // nothing		break;	case "5": // cards & match over		switch (event.key.BC) {		case "00": // walkover - draw			event.type=htlivesight.Events.type.INFO;			break;		case "01": // walkover - home team wins			event.type=htlivesight.Events.type.INFO;			break;		case "02": // walkover - away team wins			event.type=htlivesight.Events.type.INFO;			break;		case "03": // Both teams break game (2 players remaining) 			event.type=htlivesight.Events.type.INFO;			break;		case "04": // Home team breaks game (2 players remaining) 			event.type=htlivesight.Events.type.INFO;			break;		case "05": // Away team breaks game (2 players remaining) 			event.type=htlivesight.Events.type.INFO;			break;		case "10": // booking - first booking (aggressivity)			event.type=htlivesight.Events.type.YELLOW;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowNastyPlay",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).yellow +=1;			htlivesight.Events.translate.addBooked(event, match);			break;		case "11": // booking - first booking (honesty)			event.type=htlivesight.Events.type.YELLOW;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowCheating",htlivesight.data[0]));			match.getSideById(event.subjectTeamId).yellow +=1;			htlivesight.Events.translate.addBooked(event, match);			break;		case "12": // booking - second booking (aggressivity)			event.type=htlivesight.Events.type.YELLOW2;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowNastyPlay",htlivesight.data[0]));			htlivesight.Events.translate.addSentOff(event, match);			htlivesight.LineUp.SentOffEvent(event, match);			match.getSideById(event.subjectTeamId).yellow +=1;			match.getSideById(event.subjectTeamId).red +=1;			htlivesight.Events.translate.addBooked(event, match);			break;		case "13": // booking - second booking (honesty)			event.type=htlivesight.Events.type.YELLOW2;			event.special =  new htlivesightEvent.special(htlivesight.Util.Parse("YellowCheating",htlivesight.data[0]));			htlivesight.Events.translate.addSentOff(event, match);			htlivesight.LineUp.SentOffEvent(event, match);			match.getSideById(event.subjectTeamId).yellow +=1;			match.getSideById(event.subjectTeamId).red +=1;			htlivesight.Events.translate.addBooked(event, match);			break;		case "14": // booking - sent off			event.type=htlivesight.Events.type.RED;			htlivesight.Events.translate.addSentOff(event, match);			htlivesight.LineUp.SentOffEvent(event, match);			match.getSideById(event.subjectTeamId).red +=1;			break;		case "50": // indirect free kick rating?			event.type=htlivesight.Events.type.INFO;			break;		case "99": // end of match			event.type=htlivesight.Events.type.END_MATCH;			match.isFinish = true;			break;		default:			break;		};		break;	default:		break;	};};/*************************************************************** * This function extract formation (4-4-2 3-5-2 etc using * regular expression in the eventtext of a particular event. ***************************************************************/htlivesight.Events.translate.parseFormation = function(txt) {	try{		var found=txt.match(/\d\-\d\-\d/);		if (found) {return found;}		else return "";	}	catch(e){console.log("Events.translate.parseFormation error:"+ e );};}; htlivesight.Events.translate.parseLineup = function(txt) {	var lineup = new Array();	try {		var l = txt.split(": ")[1];		var i;		var zones=l.split(" - ");		for(i=0,len=zones.length; i<len; i++) {			lineup[lineup.length] = zones[i].split(", ");		}		i = lineup.length-1;		var j = lineup[i].length-1;		lineup[i][j] = lineup[i][j].substring(0, lineup[i][j].length-1);	}	catch (e) {alert("htlivesight.Events.translate.parseLineup error: "+e);	}	return lineup;};/************************************************************* * This function extract the arena name from event text. It * search for text between "> and </a>. ************************************************************/htlivesight.Events.translate.addArena = function(eventTxt){	try{		var	string=eventTxt.split(/"/);		var stringWithStadiumName="";		for(var i=2,len=string.length;i<len; i++) stringWithStadiumName+=string[i]+"\"";		var	string1=stringWithStadiumName.split("/a");		var	finalstring= string1[0].substring(4,string1[0].length-4);		return finalstring;			if (found) {return found[1];};	}	catch(e){alert("Events.translate.addArena error: "+ e );};}; htlivesight.Events.translate.addScorers = function(event, match) {	var team = event.match.getSideById(event.subjectTeamId);	if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup		lineUp= match.home.lineUp;	else		lineUp= match.away.lineUp;	/*	 *  This part manage scorers name if player id is 0. Due to missing ID, they are collected in an	 * Array counting ID from 0 and adding 1 for each scorer.	 */  	if (event.subjectPlayerId==0){ // no player ID		if (team.scorers == null) // initialize team scorers if not present			team.scorers = new Array();		// getting scorer name from event text		var scorerName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);		// look if the scorer has already scored during the match, if so added the other minute goal		for(var index=0,len=team.scorers.length; index<len; index++){			if (team.scorers[index].name==scorerName){				team.scorers[index].mins += "," + event.minute;				return;			}		}		// if scorer scores for the first time, it add the scorer in the table.		team.scorers[team.scorers.length] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");		team.scorers[team.scorers.length-1].mins += event.minute;		return;  	}	/*	 *  This part manage scorers name with player id . Scorers are collected in an	 * Array with index=playerID.	 */  	if (team.scorers == null)		team.scorers = new Object();	if (team.scorers[event.subjectPlayerId] == null ) {		team.scorers[event.subjectPlayerId] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	} else {		team.scorers[event.subjectPlayerId].mins += ",";	}	team.scorers[event.subjectPlayerId].mins += event.minute;};htlivesight.Events.translate.addBooked = function(event, match) {	var team = event.match.getSideById(event.subjectTeamId);	if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup		lineUp= match.home.lineUp;	else		lineUp= match.away.lineUp;	/*	 *  This part manage booked name if player id is 0. Due to missing ID, they are collected in an	 * Array counting ID from 0 and adding 1 for each scorer.	 */  	if (event.subjectPlayerId==0){ // no player ID		if (team.booked == null) // initialize team booked if not present			team.booked = new Array();		// getting scorer name from event text		var bookedName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);		// look if the scorer has already scored during the match, if so added the other minute goal		for(var index=0,len=team.booked.length; index<len; index++){			if (team.booked[index].name==bookedName){				team.booked[index].mins += "," + event.minute;				return;			}		}		// if scorer scores for the first time, it add the scorer in the table.		team.booked[team.booked.length] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");		team.booked[team.booked.length-1].mins += event.minute;		return;  	}	/*	 *  This part manage booked name with player id . booked are collected in an	 * Array with index=playerID.	 */  	if (team.booked == null)		team.booked = new Object();	if (team.booked[event.subjectPlayerId] == null ) {		team.booked[event.subjectPlayerId] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	} else {		team.booked[event.subjectPlayerId].mins += ",";	}	team.booked[event.subjectPlayerId].mins += event.minute;};/** * Sent Off part added by bigpapy in order to show sent off players in header. */htlivesight.Events.translate.addSentOff = function(event, match) {	var team = event.match.getSideById(event.subjectTeamId);	if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup		lineUp= match.home.lineUp;	else		lineUp= match.away.lineUp;	/*	 *  This part manage sent_off name if player id is 0. Due to missing ID, they are collected in an	 * Array counting ID from 0 and adding 1 for each scorer.	 */  	if (event.subjectPlayerId==0){ // no player ID		if (team.sent_off == null) // initialize team sent_off if not present			team.sent_off = new Array();		// getting scorer name from event text		var sent_offName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);		// look if the scorer has already scored during the match, if so added the other minute goal		for(var index=0,len=team.sent_off.length; index<len; index++){			if (team.sent_off[index].name==sent_offName){				team.sent_off[index].mins += "," + event.minute;				return;			}		}		// if scorer scores for the first time, it add the scorer in the table.		team.sent_off[team.sent_off.length] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");		team.sent_off[team.sent_off.length-1].mins += event.minute;		return;  	}	/*	 *  This part manage sent_off name with player id . sent_off are collected in an	 * Array with index=playerID.	 */  	if (team.sent_off == null)		team.sent_off = new Object();	if (team.sent_off[event.subjectPlayerId] == null ) {		team.sent_off[event.subjectPlayerId] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	} else {		team.sent_off[event.subjectPlayerId].mins += ",";	}	team.sent_off[event.subjectPlayerId].mins += event.minute;};htlivesight.Events.translate.addInjured = function(event, match) {	var team = event.match.getSideById(event.subjectTeamId);	if (match.isHomeTeam(event.subjectTeamId)) // choosing home/away lineup		lineUp= match.home.lineUp;	else		lineUp= match.away.lineUp;	/*	 *  This part manage injured name if player id is 0. Due to missing ID, they are collected in an	 * Array counting ID from 0 and adding 1 for each scorer.	 */  	if (event.subjectPlayerId==0){ // no player ID		if (team.injuries == null) // initialize team sent_off if not present			team.injuries = new Array();		// getting injured name from event text		var injuredName= htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp);		// look if the scorer has already scored during the match, if so added the other minute goal		for(var index=0,len=team.injuries.length; index<len; index++){			if (team.injuries[index].name==injuredName){				team.injuries[index].mins += "," + event.minute;				return;			}		}		// if scorer scores for the first time, it add the scorer in the table.		team.injuries[team.injuries.length] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");		team.injuries[team.injuries.length-1].mins += event.minute;		return;  	}	/*	 *  This part manage sent_off name with player id . sent_off are collected in an	 * Array with index=playerID.	 */  	if (team.injuries == null)		team.injuries = new Object();	if (team.injuries[event.subjectPlayerId] == null ) {		team.injuries[event.subjectPlayerId] =			new htlivesight.Events.Scorer(htlivesight.Events.translate.parseScorer(event.text, event.subjectPlayerId, lineUp), " (");	} else {		team.injuries[event.subjectPlayerId].mins += ",";	}	team.injuries[event.subjectPlayerId].mins += event.minute;};/*----------------------------------------------------------------------------------------- * This function try to solve the problem of finding the scorer player first and last name *------------------------------------------------------------------------------------------ */htlivesight.Events.translate.parseScorer = function(txt, id, lineUp) {	//split the text of the event in more strings every time it finds a "	var arrayTxtSplitted = txt.split(/"/);	// select the id of the player subject and return the name (two string forward)	for (var j=0;j<arrayTxtSplitted.length;j++){		var subArrayTxtSplitted = arrayTxtSplitted[j].split(/=/);		if (subArrayTxtSplitted[(subArrayTxtSplitted.length-1)]==id) {			return htlivesight.Util.RemoveSpecialChar(arrayTxtSplitted[j+2]);		}	}	try{		for (var index=0; index<lineUp.length; index++){			if  (txt.indexOf(lineUp[index].name)!=-1){				return lineUp[index].name; 			} 		}	}catch(e){}};htlivesight.Events.Scorer= function (name, mins) {	this.name = name;	this.mins = mins;};