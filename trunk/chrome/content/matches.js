/* ---------------------------------------------------------------- * objects and funtions for * Matches.asp * ---------------------------------------------------------------- */htlivesight.Matches =function() {};/* ---------------------------------------------------------------- * Get match by team id data * ---------------------------------------------------------------- */htlivesight.Matches.HTTPGetByTeam = function (teamId, youth) {	var parameters=[	                ["file", "matches"],	                ["version","2.6"],	                ["teamID", teamId]	                ];	if ((youth == "True")||(youth=="youth")||(youth=="Youth")){parameters.push(["isYouth", "true"]);}	htlivesight.ApiProxy.retrieve(document, parameters, function (xml){htlivesight.Matches.ParseGetByTeam(xml,youth,teamId);});};htlivesight.Matches.ParseGetByTeam = function(xml,youth,teamId) {	try {		var fetchDate = htlivesight.Time.parseFetchDate(xml); 		var matches = new Array();		var matchNodes = xml.getElementsByTagName("Match");		var myTeamId =""+document.getElementById("teamId").value;		var mySecondTeamId =""+document.getElementById("secondTeamId").value;		for(var j=0,len=matchNodes.length;j< len ;j++){			var	matchNode = matchNodes[j];			var sourceSystem= htlivesight.Matches.ParseSourceSystem(matchNode);			matches[matches.length] = htlivesight.Matches.ParseMatch(matchNode, sourceSystem);		}		var diffDate, nearestDiff=Number.MAX_VALUE;		var g=-1, i=0;		for (i=0; i<matches.length; i++) {			// next line added by bigpapy to avoid loading htointegrated matches by friends (single matches and tournaments one)			if(matches[i].sourceSystem=="htointegrated" && htlivesight.prefs.matches.friends.doNotGetFriendsHointegratedMatches && teamId!=myTeamId){continue;/*alert("pref: matches[i].sourceSystem= "+matches[i].sourceSystem);*/}//			if(matches[i].sourceSystem=="htointegrated")alert("no pref: matches[i].sourceSystem= "+matches[i].sourceSystem);			diffDate = Math.abs(matches[i].date - fetchDate);			if (diffDate < nearestDiff) {				nearestDiff = diffDate;				g = i;			}		};//		console.log("if(htlivesight.Friends.autoFriendCount > 0) = "+(htlivesight.Friends.autoFriendCount > 0));//		if(htlivesight.Friends.autoFriendCount > 0) {//			console.log("htlivesight.prefs.matches.friends.within  = "+htlivesight.prefs.matches.friends.within);//			console.log("nearestDiff > htlivesight.prefs.matches.friends.withinHours*htlivesight.Time.HOUR = "+(nearestDiff > htlivesight.prefs.matches.friends.withinHours*htlivesight.Time.HOUR));////			console.log("nearestDiff ="+ nearestDiff);//			console.log("htlivesight.prefs.matches.friends.withinHours = "+htlivesight.prefs.matches.friends.withinHours);//			console.log("htlivesight.Time.HOUR = "+htlivesight.Time.HOUR);			if(htlivesight.prefs.matches.friends.within &&					nearestDiff > htlivesight.prefs.matches.friends.withinHours*htlivesight.Time.HOUR && !((teamId == myTeamId ||teamId == mySecondTeamId)&& !((sourceSystem == "Youth")||(sourceSystem=="youth")))){				g = -1;			}//		}		if(g != -1) {			if(!(htlivesight.warningShown == true && htlivesight.liveCount >= 20))//				console.log("adding matchid = "+ matches[g].id);				htlivesight.AddLiveMatch(matches[g].id, matches[g].sourceSystem);		}		if(htlivesight.Friends.autoFriendCount > 0) {			htlivesight.Friends.autoFriendCount--;		}	} catch(e) {		alert("Matches.ParseGetByTeam: " + e);	}	return null;};
/* ---------------------------------------------------------------- * common Parse functions * ---------------------------------------------------------------- */htlivesight.Matches.ParseMatch = function (xml, sourceSystem) {	return new htlivesight.Match(			htlivesight.Live.ParseMatchId(xml),			htlivesight.League.ParseMatchDate(xml),			htlivesight.Live.ParseHomeTeam(xml),			htlivesight.Live.ParseAwayTeam(xml),			null, null,			sourceSystem	);};htlivesight.Matches.ParseMatchType = function (xml) {	alert ("questa funzione non viene mai chiamata: Matches.ParseMatchType");
	return xml.getElementsByTagName("MatchType")[0].textContent;
};htlivesight.Matches.ParseSourceSystem = function (xml) {	return xml.getElementsByTagName("SourceSystem")[0].textContent.toLowerCase();};