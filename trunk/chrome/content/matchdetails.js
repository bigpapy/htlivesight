/* ---------------------------------------------------------------- * Get match by team id data * ---------------------------------------------------------------- */htlivesight.matchDetails=  {};htlivesight.matchDetails.arena = function(id, name, weatherId, sold ) {	this.id = id;	this.name = name;	this.weatherId = weatherId;	this.sold = sold;};
htlivesight.matchDetails.myArena = function(total, terraces, basic, roof, vip) {	this.total = total;	this.terraces = terraces;	this.basic = basic;	this.roof = roof;	this.vip = vip;};htlivesight.matchDetails.view= function(){	if (htlivesight.myArena == undefined) htlivesight.matchDetails.HTTPGetArena();	for (var key in htlivesight.Match.List) {		var match=htlivesight.Match.List[key];		if (match.isFinish==true && match.isRatingLoaded!=true){			try{				htlivesight.matchDetails.HTTPGet(match);				var popup=document.getElementById("home_team_name_"+match.id+"_"+match.sourceSystem+"_statistics");				var l1 = document.getElementById("home_team_name_" + match.id + "_" + match.sourceSystem);				l1.setAttribute("onclick","htlivesight.DOM.statisticspopup(this.id);");				popup=document.getElementById("away_team_name_"+match.id+"_"+match.sourceSystem+"_statistics");				var l1 = document.getElementById("away_team_name_" + match.id + "_" + match.sourceSystem);				l1.setAttribute("onclick","htlivesight.DOM.statisticspopup(this.id);");				htlivesight.Match.List[key].isRatingLoaded= true;			}catch(e){console.log("htlivesight.matchDetails.view "+e);};		};	};};htlivesight.matchDetails.HTTPGet = function (match) {	var parameters=[["file","matchdetails"],	                ["version", "2.3"],	                ["matchEvents","false"],	                ["matchID",match.id],	                ["sourceSystem",match.sourceSystem],	                ];	htlivesight.ApiProxy.retrieve(document, parameters, function(xml){htlivesight.matchDetails.ParseGet(xml,match);});};htlivesight.matchDetails.HTTPGetArena = function () {	var parameters=[["file","arenadetails"],	                ["version", "1.4"],	                ];	htlivesight.ApiProxy.retrieve(document, parameters, function(xml){htlivesight.matchDetails.ParseGetArenaDetails(xml);});};htlivesight.matchDetails.ParseGetArenaDetails= function(xml){	try {		var total = htlivesight.Util.Parse("Total", xml); //		var terraces = htlivesight.Util.Parse("Terraces", xml);		var basic = htlivesight.Util.Parse("Basic", xml);		var roof = htlivesight.Util.Parse("Roof", xml);		var vip = htlivesight.Util.Parse("VIP", xml);		htlivesight.myArena = new htlivesight.matchDetails.myArena(total, terraces, basic, roof, vip);	}catch(e){console.log("matchDetails.ParseGetArenaDetails: "+e);};};
htlivesight.matchDetails.ParseGet = function(xml, match) {	try {		var arenaDetails = xml.getElementsByTagName("Arena")[0]; //		var homeDetails = xml.getElementsByTagName("HomeTeam")[0];		var awayDetails = xml.getElementsByTagName("AwayTeam")[0];		var popup=document.getElementById("home_team_name_"+match.id+"_"+match.sourceSystem+"_statistics");		htlivesight.matchDetails.parseRatings(homeDetails, awayDetails, popup);		if(match.sourceSystem.toLowerCase() != "youth") htlivesight.matchDetails.parseSold(arenaDetails, popup);		var popup=document.getElementById("away_team_name_"+match.id+"_"+match.sourceSystem+"_statistics");		htlivesight.matchDetails.parseRatings(awayDetails, homeDetails, popup);	} catch(e) {		console.log("Parse htlivesight.MatchDetails: " + e);	}};htlivesight.matchDetails.parseRatings = function(xml, xmlOpp, popup) {	try{		var team = new Object();		var TacticType= htlivesight.Util.Parse("TacticType", xml);		team.tacticType = htlivesight.matchDetails.parserTacticType(htlivesight.Util.Parse("TacticType", xml));		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("TacticType",htlivesight.data[0]), team.tacticType, popup);		team.tacticSkill = ""+(parseInt(htlivesight.Util.Parse("TacticSkill", xml))-1);		var textRating=htlivesight.matchDetails.parserMainSkill(team.tacticSkill);		if (TacticType == "0") textRating ="";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("TacticSkill",htlivesight.data[0]), textRating, popup);		team.ratingMidfield = htlivesight.Util.Parse("RatingMidfield", xml);		team.ratingMidfieldOpp = htlivesight.Util.Parse("RatingMidfield", xmlOpp);		var rate = Math.round(parseInt(team.ratingMidfield)/(parseInt(team.ratingMidfield)+ parseInt(team.ratingMidfieldOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingMidfield)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("Midfield",htlivesight.data[0]), textRating, popup);		team.ratingRightDef = htlivesight.Util.Parse("RatingRightDef", xml);		team.ratingLeftAttOpp = htlivesight.Util.Parse("RatingLeftAtt", xmlOpp);		rate = Math.round(parseInt(team.ratingRightDef)/(parseInt(team.ratingRightDef)+ parseInt(team.ratingLeftAttOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingRightDef)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("RightDefence",htlivesight.data[0]), textRating, popup);		team.ratingMidDef = htlivesight.Util.Parse("RatingMidDef", xml);		team.ratingMidAttOpp = htlivesight.Util.Parse("RatingMidAtt", xmlOpp);		rate = Math.round(parseInt(team.ratingMidDef)/(parseInt(team.ratingMidDef)+ parseInt(team.ratingMidAttOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingMidDef)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("MiddleDefence",htlivesight.data[0]), textRating, popup);		team.ratingLeftDef = htlivesight.Util.Parse("RatingLeftDef", xml);		team.ratingRightAttOpp = htlivesight.Util.Parse("RatingRightAtt", xmlOpp);		rate = Math.round(parseInt(team.ratingLeftDef)/(parseInt(team.ratingLeftDef)+ parseInt(team.ratingRightAttOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingLeftDef)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("LeftDefence",htlivesight.data[0]), textRating, popup);		team.ratingRightAtt = htlivesight.Util.Parse("RatingRightAtt", xml);		team.ratingLeftDefOpp = htlivesight.Util.Parse("RatingLeftDef", xmlOpp);		rate = Math.round(parseInt(team.ratingRightAtt)/(parseInt(team.ratingRightAtt)+ parseInt(team.ratingLeftDefOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingRightAtt)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("RightAttack",htlivesight.data[0]), textRating, popup);		team.ratingMidAtt = htlivesight.Util.Parse("RatingMidAtt", xml);		team.ratingMidDefOpp = htlivesight.Util.Parse("RatingMidDef", xmlOpp);		rate = Math.round(parseInt(team.ratingMidAtt)/(parseInt(team.ratingMidAtt)+ parseInt(team.ratingMidDefOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingMidAtt)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("MiddleAttack",htlivesight.data[0]), textRating, popup);		team.ratingLeftAtt = htlivesight.Util.Parse("RatingLeftAtt", xml);		team.ratingRightDefOpp = htlivesight.Util.Parse("RatingRightDef", xmlOpp);		rate = Math.round(parseInt(team.ratingLeftAtt)/(parseInt(team.ratingLeftAtt)+ parseInt(team.ratingRightDefOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingLeftAtt)+" "+ rate + "%";		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("LeftAttack",htlivesight.data[0]), textRating, popup);		team.teamAttitude = htlivesight.matchDetails.parserTacticAttitude(htlivesight.Util.Parse("TeamAttitude", xml));		htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("TeamAttitude",htlivesight.data[0]), team.teamAttitude, popup);		team.ratingIndirectSetPiecesDef = htlivesight.Util.Parse("RatingIndirectSetPiecesDef", xml);		team.ratingIndirectSetPiecesAttOpp = htlivesight.Util.Parse("RatingIndirectSetPiecesAtt", xmlOpp);		rate = Math.round(parseInt(team.ratingIndirectSetPiecesDef)/(parseInt(team.ratingIndirectSetPiecesDef)+ parseInt(team.ratingIndirectSetPiecesAttOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingIndirectSetPiecesDef)+" "+ rate + "%";		if (!isNaN(rate)) htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("IndirectSetPiecesDefence",htlivesight.data[0]), textRating, popup);		team.ratingIndirectSetPiecesAtt = htlivesight.Util.Parse("RatingIndirectSetPiecesAtt", xml);		team.ratingIndirectSetPiecesDefOpp = htlivesight.Util.Parse("RatingIndirectSetPiecesDef", xmlOpp);		rate = Math.round(parseInt(team.ratingIndirectSetPiecesAtt)/(parseInt(team.ratingIndirectSetPiecesAtt)+ parseInt(team.ratingIndirectSetPiecesDefOpp))*100);		textRating=htlivesight.matchDetails.parserRating(team.ratingIndirectSetPiecesAtt)+" "+ rate + "%";		if (!isNaN(rate)) htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("IndirectSetPiecesAttack",htlivesight.data[0]), textRating, popup);	}catch(e){console.log("htlivesight.matchDetails.parseRatings= "+e);}};htlivesight.matchDetails.parseSold = function(xml, popup){	try{		var arena= new Object();		arena.soldTotal = htlivesight.Util.Parse("SoldTotal", xml);		arena.soldTerraces = htlivesight.Util.Parse("SoldTerraces", xml);		arena.soldBasic = htlivesight.Util.Parse("SoldBasic", xml);		arena.soldRoof = htlivesight.Util.Parse("SoldRoof", xml);		arena.soldVIP = htlivesight.Util.Parse("SoldVIP", xml);		if ((arena.soldTotal!= null) && (arena.soldTerraces!= null)){			var soldTotalPercent= Math.round(parseInt(arena.soldTotal)/(parseInt(htlivesight.myArena.total))*100);			arena.soldTotal= arena.soldTotal+" / "+ htlivesight.myArena.total + "  " + soldTotalPercent + "%";			htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("Total",htlivesight.data[0]), arena.soldTotal, popup);		}		if (arena.soldTerraces!= null){			var soldTerracesPercent= Math.round(parseInt(arena.soldTerraces)/parseInt(htlivesight.myArena.terraces)*100);			arena.soldTerraces= arena.soldTerraces+" / "+ htlivesight.myArena.terraces + "  " + soldTerracesPercent + "%";			htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("Terraces",htlivesight.data[0]), arena.soldTerraces, popup);		}		if (arena.soldBasic!= null){			var soldBasicPercent= Math.round(parseInt(arena.soldBasic)/parseInt(htlivesight.myArena.basic)*100);			arena.soldBasic= arena.soldBasic+" / "+ htlivesight.myArena.basic + "  " + soldBasicPercent + "%";			htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("Basic",htlivesight.data[0]), arena.soldBasic, popup);		}		if (arena.soldRoof!= null){			var soldRoofPercent= Math.round(parseInt(arena.soldRoof)/parseInt(htlivesight.myArena.roof)*100);			arena.soldRoof= arena.soldRoof+" / "+ htlivesight.myArena.roof + "  " + soldRoofPercent + "%";			htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("Roof",htlivesight.data[0]), arena.soldRoof, popup);		}		if (arena.soldVIP!= null){			var soldVIPPercent= Math.round(parseInt(arena.soldVIP)/parseInt(htlivesight.myArena.vip)*100);			arena.soldVIP= arena.soldVIP+" / "+ htlivesight.myArena.vip + "  " + soldVIPPercent + "%";			if (!isNaN(soldVIPPercent)) htlivesight.matchDetails.addToPopup(htlivesight.Util.Parse("VIP",htlivesight.data[0]), arena.soldVIP, popup);		}		return arena;	}catch(e){console.log(e);}};htlivesight.matchDetails.addToPopup = function(rating, value, popup){	var hbox = document.createElement("tr");	label = document.createElement("td");	label.innerHTML=""+rating;	label_number = document.createElement("td");	label_number.innerHTML=""+value;	hbox.appendChild(label);	hbox.appendChild(label_number);	popup.appendChild(hbox);};htlivesight.matchDetails.parserTacticType = function(tactic) {	switch (tactic) {	case "0": return htlivesight.Util.Parse("Normal",htlivesight.data[0]);	break;	case "1": return htlivesight.Util.Parse("TacticPressing",htlivesight.data[0]);	break;	case "2": return htlivesight.Util.Parse("TacticCA",htlivesight.data[0]);	break;	case "3": return htlivesight.Util.Parse("TacticAIM",htlivesight.data[0]);	break;	case "4": return htlivesight.Util.Parse("TacticAOW",htlivesight.data[0]);	break;	case "7": return htlivesight.Util.Parse("TacticPlayCreative",htlivesight.data[0]);	break;	case "8": return htlivesight.Util.Parse("TacticLongShots",htlivesight.data[0]);	break;	default: return "";	};};htlivesight.matchDetails.parserTacticAttitude = function(attitude) {	switch (attitude) {	case "-1": return htlivesight.Util.Parse("PIC",htlivesight.data[0]);	break;	case "0": return htlivesight.Util.Parse("Normal",htlivesight.data[0]);	break;	case "1": return htlivesight.Util.Parse("MOTS",htlivesight.data[0]);	break;	default: return "";	};};htlivesight.matchDetails.parserRating = function(value) {	var mainSkill=""+ Math.floor((parseInt(value)-1)/4);	var subSkill=""+ (parseInt(value)-1)%4;	return htlivesight.matchDetails.parserMainSkill(mainSkill) +" "+ htlivesight.matchDetails.parserSubSkill(subSkill);};htlivesight.matchDetails.parserSubSkill = function(subSkill) {		switch (subSkill) {	case "0": return htlivesight.Util.Parse("VeryLow",htlivesight.data[0]);	break;	case "1": return htlivesight.Util.Parse("Low",htlivesight.data[0]);	break;	case "2": return htlivesight.Util.Parse("High",htlivesight.data[0]);	break;	case "3": return htlivesight.Util.Parse("VeryHigh",htlivesight.data[0]);	break;	default: return subSkill;	};};htlivesight.matchDetails.parserMainSkill = function(mainSkill) {	switch (mainSkill) {	case "-1": return "-";	break;	case "0": return htlivesight.Util.Parse("Disastrous",htlivesight.data[0]);	break;	case "1": return htlivesight.Util.Parse("Wretched",htlivesight.data[0]);	break;	case "2": return htlivesight.Util.Parse("Poor",htlivesight.data[0]);	break;	case "3": return htlivesight.Util.Parse("Weak",htlivesight.data[0]);	break;	case "4": return htlivesight.Util.Parse("Inadequate",htlivesight.data[0]);	break;	case "5": return htlivesight.Util.Parse("Passable",htlivesight.data[0]);	break;	case "6": return htlivesight.Util.Parse("Solid",htlivesight.data[0]);	break;	case "7": return htlivesight.Util.Parse("Excellent",htlivesight.data[0]);	break;	case "8": return htlivesight.Util.Parse("Formidable",htlivesight.data[0]);	break;	case "9": return htlivesight.Util.Parse("Outstanding",htlivesight.data[0]);	break;	case "10": return htlivesight.Util.Parse("Brilliant",htlivesight.data[0]);	break;	case "11": return htlivesight.Util.Parse("Magnificent",htlivesight.data[0]);	break;	case "12": return htlivesight.Util.Parse("WorldClass",htlivesight.data[0]);	break;	case "13": return htlivesight.Util.Parse("Supernatural",htlivesight.data[0]);	break;	case "14": return htlivesight.Util.Parse("Titanic",htlivesight.data[0]);	break;	case "15": return htlivesight.Util.Parse("ExtraTerrestrial",htlivesight.data[0]);	break;	case "16": return htlivesight.Util.Parse("Mythical",htlivesight.data[0]);	break;	case "17": return htlivesight.Util.Parse("Magical",htlivesight.data[0]);	break;	case "18": return htlivesight.Util.Parse("Utopian",htlivesight.data[0]);	break;	case "19": return htlivesight.Util.Parse("Divine",htlivesight.data[0]);	break;	default: return mainSkill;	};};htlivesight.matchDetails.parseMatchId = function(xml) {	return parseInt(htlivesight.Util.Parse("MatchID", xml), 10);
};htlivesight.matchDetails.parseArena = function(xml) {	return new htlivesight.matchDetails.arena(			htlivesight.matchDetails.parseArenaId(xml),			htlivesight.matchDetails.parseArenaName(xml),			null, null	);};htlivesight.matchDetails.parseArenaId = function (xml) {	return parseInt(htlivesight.Util.Parse("ArenaID", xml), 10);
};htlivesight.matchDetails.parseArenaName = function (xml) {	return htlivesight.Util.Parse("ArenaName", xml);};htlivesight.matchDetails.parseWeatherId = function (xml) {	return parseInt(htlivesight.Util.Parse("WeatherID", xml),10);
};htlivesight.matchDetails.parseSoldTotal = function (xml) {	return htlivesight.Util.Parse("SoldTotal", xml);};